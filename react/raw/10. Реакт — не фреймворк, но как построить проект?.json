{"stage":2,"title":"Реакт — не фреймворк, но как построить проект?","subTitle":"Архитектура и основные модули из экосистемы Реакта","markdown":"Чем в сознании разработчика библиотека отличается от фреймворка? Библиотека решает конкретную задачу, фреймворк даёт экосистему и диктует архитектуру.\n\nКогда впервые знакомишься с Реактом, то после всяких Ангуларов не понимаешь, как же с ним работать: это же библиотека для вёрстки, почему я должен её использовать? У меня всё хорошо, есть `@angular/common/http`, `@angular/universal`, `@angular/router` и прочее, а тут мне нужно из говна и палок слепить проект, не хочу этим заниматься!\n\nТак-то оно правда, но вы пользуетесь Реактом в 2018 году, а не в 2014, когда ещё ничего не было, так что сегодня мы рассмотрим основные библиотеки, которые можно использовать с Реактом.\n\n## Библиотеки\n\n### Стилизация\n\nКак вы понимаете, [Styled Components](https://styled-components.com). Эту идеальную библиотеку пока никто не переплюнет.\n\n### Роутинг\n\nЕго мы тоже проходили, это [Реакт-роутер](https://reacttraining.com/react-router).\n\n### ХТТП-запросы\n\nСравнительно [новый](https://caniuse.com/#feat=fetch) браузерный АПИ для запросов.\n\nЕсли нужна поддержка старых браузеров, используют полифилл [github/fetch](https://github.github.io/fetch/).\n\n_(полифилл это библиотека, которая предоставляет новую функциональность через старые технологии — например, в этом случае `fetch` работает на XMLHttpRequest)_\n\n### Формы\n\nВ интерфейсах часто бывают формы: инпуты, селекты и прочие поля ввода, а у форм ведь должна быть валидация данных и прочие возможности.\n\n[Formik](https://github.com/jaredpalmer/formik) либо [react-final-form](https://github.com/final-form/react-final-form).\n\n### Хранение данных\n\nСтейт компонента. Да, я не шучу, в 99.99999999% случаев [используйте](https://medium.com/@jmuse/d86394da2b50) локальный стейт компонента или его родителей.\n\nПочему часто советуют Редакс или Мобкс? Потому что в 2015 Редакс был очень модным и все старались его воткнуть себе в проект, а потом оказалось, что он на пустом месте усложняет проект. Сам Даня Абрамов говорит, что скорее всего [вам не нужен Редакс](https://medium.com/@dan_abramov/be46360cf367).\n\n### Модальные окна\n\nЛибо [react-portal](https://github.com/tajo/react-portal), либо [ReactDOM.createPortal()](https://reactjs.org/docs/portals.html).\n\n### Бутстрап или его замена\n\nЧасто советуют [Ant Design](https://ant.design/), но лично я не пользовался: у меня всегда был свой дизайн.\n\n### Работа с `<head />`\n\nТайтлы, описания, [опенграф](http://ogp.me/)-теги обновляются через [react-helmet](https://github.com/nfl/react-helmet).\n\n### Даты\n\n[date-fns](http://date-fns.org) и [react-day-picker](http://react-day-picker.js.org/).\n\nmoment.js слишком жирный и придерживается мутабельности — это неудобно.\n\n### Селекты и автодополнения\n\nРаньше был react-select, но он вообще не поддерживается автором.\n\nСейчас есть [downshift](https://github.com/paypal/downshift), но это достаточно низкоуровневая библиотека, поверх которой можно строить свои компоненты — посмотрите [примеры](https://github.com/paypal/downshift#examples) в документации.\n\n### Карты\n\nЗависит от сервиса, который вы используете: например, [`google-map-react`](https://github.com/istarkov/google-map-react) или [`react-yandex-maps`](https://www.npmjs.com/package/react-yandex-maps).\n\n### Графики\n\nОбычно все графики работают поверх [d3.js](https://d3js.org/) — это самая мощная библиотека для работы с ними, посмотрите на [эти демки](https://bl.ocks.org/), которые собирает автор.\n\n[vx](https://vx-demo.now.sh) — библиотека, которая дружит d3 и Реакт.\n\n---\n\nОбычно хватает поиска в Гугле «react x», а после остаётся только выбрать.\n\nВот несколько правил:\n\n* **версия желательно не должна быть 0.х**: по Семверу всё [может](http://semver.org/) сломаться,\n* **понятные описания релизов**: если нет файла `CHANGELOG.md` или вкладка Releases на Гитхабе пустует, то вам сложно будет обновляться,\n* **должны быть ишью и пулл-реквесты**: библиотекой должен пользоваться кто-то кроме её автора.\n\n### А как же Вебпак и Бейбель\n\nУ вас есть CRA, который скрыл настройку Вебпака и Бейбеля под собой. Можете выдохнуть.\n\n## Архитектура проекта\n\nЕдем дальше. Частый вопрос: а как организовывать проект?\n\n### Бизнес-логика превыше всего\n\nОрганизация проекта строится по **бизнес-логике**: нет нужды делать кучу директорий `src/components/Properties`, `src/containers/Properties`, `src/actions/Properties`, `src/api/Properties`, если можно всё положить в `src/Properties/{actions,api}`.\n\nОбъединять по доменам проще, чем бегать по 10 директориям, вы же в один момент времени работаете только с одной сущностью?\n\nНапример, вам нужно сделать авторизацию, `Auth`: две страницы (логин, регистрация), несколько компонентов, запросы к серверу. Когда вы её делаете, вы же не отвлекаетесь на другие компоненты или файлы? Вы работаете конкретно над авторизацией.\n\nДумайте продуктом, а не ненужными абстракциями типа компонентов или контейнеров. Люди в вашем продукте пользуются конкретной функциональностью, а не экшенами, редьюсерами или контейнерами.\n\n### Избавьтесь от components\n\nНет, я серьёзно: даже после предыдущего пункта люди часто оставляют директорию `components`. У вас всё приложение построено на компонентах, зачем директорию отдельно создавать?\n\nЕсли хотите какой-нибудь хедер или футер переиспользовать на разных страницах, то положите в корень `src`, а не в `src/components` или `src/shared`.\n\nДля интерфейсных вещей типа форм, кнопок и прочего обычно используют `src/ui`.\n\n### Не создавайте директории ради одного файла\n\nЧасто вижу `src/Header`, в котором лежит сиротливый `index.js`. Зачем? На будущее? Преждевременные оптимизации — корень всех бед.\n\nПоложите в `src/Header.js`.\n\n### Смешивать стили, рендер и логику можно\n\nЭто же компонентный подход, ничего страшного если в одном файле будут СК, \"главный\" Реакт-компонент с запросами или обработчиками событий.\n\nЕсли стилей много, то ваш выбор `styled.js` с экспортами рядом с файлом.\n\n### Переиспользуйте компоненты\n\nЕщё один частый вопрос: а как мелко дробить компоненты?\n\nДробите до переиспользуемости. Если у вас есть два огромных блока, в которых повторяется только кнопка, то вынесите кнопку в отдельный компонент, а всё остальное оставьте как есть: смысл дробить меньше?\n\nНо если работать неудобно с компонентом — то дробите тоже.\n\n## Итог\n\nСегодняшним уроком я хотел вам показать, что Реакт это устоявшаяся экосистема, где либо используются стандарты (фетч), либо есть давно устоявшиеся библиотеки, заточенные чисто под Реакт.\n\n---\n\nПример неплохой архитектуры? Например, моя неплоха, хоть и неидеальна.\n\n```\nsrc\n├── About.js\n├── Announces\n│   ├── CourseReactAnnounce.js\n│   └── index.js\n├── App.js\n├── Buy\n│   ├── Closed.js\n│   ├── Medium.svg\n│   ├── Old.js\n│   ├── Telegram.svg\n│   ├── VK.svg\n│   ├── YouTube.svg\n│   ├── index.js\n│   └── tinkoff.js\n├── Companies\n│   ├── everpoint.js\n│   └── index.js\n├── Courses\n│   ├── Lessons\n│   │   ├── Header.js\n│   │   ├── Lesson.js\n│   │   ├── ReactMarkdown.js\n│   │   ├── Stage.js\n│   │   ├── external-link.svg\n│   │   └── styled.js\n│   ├── React\n│   │   ├── About.js\n│   │   ├── Antihire.js\n│   │   ├── Buy.js\n│   │   ├── Changes\n│   │   │   ├── clocks.svg\n│   │   │   └── index.js\n│   │   ├── Footer\n│   │   │   ├── index.js\n│   │   │   ├── md.svg\n│   │   │   ├── tg.svg\n│   │   │   ├── vk.svg\n│   │   │   └── yt.svg\n│   │   ├── Header\n│   │   │   ├── atom.png\n│   │   │   └── index.js\n│   │   ├── History\n│   │   │   ├── index.js\n│   │   │   └── max.svg\n│   │   ├── Kursach\n│   │   │   ├── index.js\n│   │   │   └── kursach.svg\n│   │   ├── LandingUI.js\n│   │   ├── Project\n│   │   │   ├── Aviasales\n│   │   │   │   ├── aviasales.svg\n│   │   │   │   └── index.js\n│   │   │   ├── Dates.js\n│   │   │   ├── Format\n│   │   │   │   ├── format.svg\n│   │   │   │   ├── assistant.svg\n│   │   │   │   ├── code_review.svg\n│   │   │   │   └── index.js\n│   │   │   └── index.js\n│   │   ├── Quote.js\n│   │   ├── Reviews\n│   │   │   ├── Review.js\n│   │   │   └── index.js\n│   │   ├── SoftSkills\n│   │   │   ├── index.js\n│   │   │   ├── softskills_0.jpg\n│   │   │   ├── softskills_0_mobile.png\n│   │   │   ├── softskills_1.jpg\n│   │   │   ├── softskills_1_mobile.png\n│   │   │   ├── softskills_2.jpg\n│   │   │   ├── softskills_2_mobile.png\n│   │   │   ├── softskills_small_0.jpg\n│   │   │   ├── softskills_small_0_mobile.png\n│   │   │   ├── softskills_small_1.jpg\n│   │   │   ├── softskills_small_1_mobile.png\n│   │   │   ├── softskills_small_2.jpg\n│   │   │   └── softskills_small_2_mobile.png\n│   │   └── index.js\n│   ├── Verstka\n│   │   ├── Landing\n│   │   │   ├── About.js\n│   │   │   ├── Buy.js\n│   │   │   ├── Chat.js\n│   │   │   ├── Course.js\n│   │   │   ├── Feedback\n│   │   │   │   ├── bot.png\n│   │   │   │   ├── chats.png\n│   │   │   │   ├── code-review-feedback.png\n│   │   │   │   └── index.js\n│   │   │   ├── Format\n│   │   │   │   ├── index.js\n│   │   │   │   └── uberEats@2x.png\n│   │   │   ├── Kursach\n│   │   │   │   ├── cursach@2x.png\n│   │   │   │   └── index.js\n│   │   │   ├── Questions\n│   │   │   │   ├── Question.js\n│   │   │   │   ├── data.js\n│   │   │   │   └── index.js\n│   │   │   ├── Reviews\n│   │   │   │   ├── index.js\n│   │   │   │   └── reviews@2x.png\n│   │   │   └── index.js\n│   │   ├── Study\n│   │   │   ├── Footer.js\n│   │   │   ├── link.svg\n│   │   │   ├── Lessons.js\n│   │   │   ├── codeRenderer.js\n│   │   │   └── styles.js\n│   │   └── index.js\n│   └── index.js\n├── Footer\n│   ├── index.js\n│   ├── md.svg\n│   ├── tg.svg\n│   ├── vk.svg\n│   └── yt.svg\n├── Frontend\n│   ├── About.js\n│   ├── Buy.js\n│   ├── Feedback\n│   │   ├── Reviews@2x.png\n│   │   └── index.js\n│   ├── Format.js\n│   ├── Kursach\n│   │   ├── index.js\n│   │   └── screenshot.png\n│   ├── Landing.js\n│   ├── LandingFeb\n│   │   ├── Program.js\n│   │   ├── Steps.js\n│   │   ├── aviasales.png\n│   │   └── index.js\n│   ├── NewYearBuy.js\n│   ├── Payed.js\n│   ├── Plan.js\n│   ├── Premium.js\n│   ├── Program.js\n│   ├── Questions\n│   │   ├── Question.js\n│   │   ├── data.js\n│   │   └── index.js\n│   ├── Result.js\n│   ├── Reviews\n│   │   ├── Navigation.js\n│   │   ├── Review.js\n│   │   ├── data.js\n│   │   └── index.js\n│   ├── Steps.js\n│   ├── Study\n│   │   ├── Footer.js\n│   │   ├── Lessons.js\n│   │   └── index.js\n│   ├── data.js\n│   └── index.js\n├── Header.js\n├── Helmet.js\n├── Home\n│   ├── Courses.js\n│   ├── YouTube\n│   │   ├── index.js\n│   │   └── youtube@2x.png\n│   ├── data.js\n│   └── index.js\n├── Navigation.js\n├── Payment\n│   ├── Gift\n│   │   ├── Telegram.svg\n│   │   ├── bg@2x.png\n│   │   └── index.js\n│   ├── copy.svg\n│   ├── fb.svg\n│   ├── index.js\n│   ├── ok.svg\n│   ├── tw.svg\n│   └── vk.svg\n├── ReactRemarkable\n│   ├── components.js\n│   ├── index.js\n│   └── toc\n│       ├── index.js\n│       └── utils.js\n├── ScrollToTop.js\n├── analytics.js\n├── api.js\n├── fonts\n│   ├── GraphikLCG\n│   │   ├── GraphikLCG-Black.eot\n│   │   ├── GraphikLCG-Black.ttf\n│   │   ├── GraphikLCG-Black.woff\n│   │   ├── GraphikLCG-Bold.eot\n│   │   ├── GraphikLCG-Bold.ttf\n│   │   ├── GraphikLCG-Bold.woff\n│   │   ├── GraphikLCG-Medium.eot\n│   │   ├── GraphikLCG-Medium.ttf\n│   │   ├── GraphikLCG-Medium.woff\n│   │   ├── GraphikLCG-Regular.eot\n│   │   ├── GraphikLCG-Regular.ttf\n│   │   ├── GraphikLCG-Regular.woff\n│   │   ├── GraphikLCG-Semibold.eot\n│   │   ├── GraphikLCG-Semibold.ttf\n│   │   └── GraphikLCG-Semibold.woff\n│   └── KazimirText\n│       ├── KazimirText-Roman.eot\n│       ├── KazimirText-Roman.ttf\n│       └── KazimirText-Roman.woff\n├── index.css\n├── index.js\n├── registerServiceWorker.js\n└── ui\n    ├── Aside.js\n    ├── Button.js\n    ├── Code.js\n    ├── H1.js\n    ├── H2.js\n    ├── H3.js\n    ├── H4.js\n    ├── HeroUnit.js\n    ├── Link.js\n    ├── P.js\n    ├── Wrapper.js\n    └── index.js\n```\n","id":"uUcxgnAvbj","stageId":"rHAh7OXEFL"}