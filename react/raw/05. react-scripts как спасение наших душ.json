{"stage":1,"title":"react-scripts как спасение наших душ","subTitle":"Как начать писать код уже сейчас, а не тратить 10 тысяч лет на настройку Вебпака","markdown":"В прошлом уроке мы попробовали написать совсем крошечное приложение из трёх компонентов, но уже поняли, что с `createElement` это чертовски сложно — читаемость кода почти нулевая, конечно.\n\nТем не менее, давайте освежим память прежде чем пойдём в инструменты, которые скроют от нас детали реализаций:\n\n* Реакт — это чистый Джаваскрипт и работает на функции `React.createElement`;\n* `React` это не рендерер, а библиотека для построения дерева элементов и его обновления, за это отвечает ВиртуалДОМ;\n* За рендер в браузер отвечает библиотека `ReactDOM`, но бывают ещё `react-tv`, `react-native` и другие;\n* Реакт это компонентный подход, в котором для передачи данных используют пропы — атрибуты с любыми типами данных (вплоть до функций).\n\nИдем дальше. Учтите, что в этом уроке мы будем настраивать вашу систему для работы и это не должно вас пугать. Погнали!\n\n## Нода и пакетные менеджеры Нпм и Ярн\n\nС приветствия я вам рекомендовал пройти урок про [инструменты](https://erodionov.ru/courses/verstka/FhTKluFzm7/Z85TwJEQNd) и сейчас вам это должно помочь: мы будем работать с терминалом.\n\nДля начала нам нужно поставить [Ноду](https://nodejs.org/en/) (Node.js): она выполняет джс-файлы не в браузере, а в виртуальном сервере.\n\n#### Windows\n\nСкачайте установщик с сайта [nodejs.org](https://nodejs.org/en/) и через него установите.\n\n#### Unix\n\nПоставьте из своих репозиториев: `apt-get`, `yum` и так далее.\n\n#### macOS\n\nВ Маке нет встроенного пакетного менеджера (а зря!), поэтому сначала нужно поставить [Homebrew](http://brew.sh/).\n\nПосле этого вы можете ставить пакеты и они будут очень аккуратно вписаны в систему.\n\nПоставьте Ноду через команду `brew install node`.\n\n---\n\nВ Ноде есть пакетный менеджер [npm](http://npmjs.com/). Он работал плохо и медленно, поэтому ребята из Фейсбука сделали свой пакетный менеджер [Yarn](http://yarnpkg.com/): он работает быстрее и предсказуемее, поэтому ставьте его. Установка описана на его сайте, учитесь добывать информацию сами из документаций.\n\nЧто такое вообще пакетный менеджер и почему предсказуемость и скорость так важны?\n\n* **Во-первых**, во время разработки вы будете использовать много сторонних модулей — ведь кучу вещей кто-то за вас уже когда-то написал, осталось это только подключить и использовать.\n\n* **Во-вторых**, говоря про скорость: у каждого пакета могут быть свои зависимости (по 2-3), а в проекте, например, 100 зависимостей. Вместо 100 у вас устанавливается 300: 100 основных пакетов и их зависимостей. Может быть долго!\n\n* **В-третьих**, пакеты соблюдают [Семвер](http://semver.org/) — семантичное версионирование. Дело в том, что пакеты обновляются, а ломать работающие приложения из-за этого не хочется, поэтому у нас есть версионирование `MAJOR.MINOR.PATCH` (например, Реакт сейчас — 16.2.0). `npm` раньше не уважал прописанные в `package.json` (основной файл проекта) версии и порою всё ломалось. В Ярне такого нет изначально.\n\nУ Ярна нет своей базы пакетов, он использует базу нпм.\n\n---\n\nОкей, Ярн поставили, Нода тоже стоит, всё замечательно. Тут я делаю уточнение: пакеты, которые ставятся через Ярн (ну или нпм, но, опять же, нпм лучше не использовать) могут быть **локальными** и **глобальными**. Ставятся они по-разному:\n\n```sh\n# поставить в систему\nyarn global add create-react-app\n\n# поставить локально в проект и записать в `package.json`\nyarn add date-fns\n\n# поставить локально и записать в package.devDependencies\nyarn add --dev webpack\n```\n\nПакеты проекта в джс-мире описываются в файле [`package.json`](https://docs.npmjs.com/files/package.json) в секциях `dependencies` и `devDependencies`.\n\n#### dependencies\n\nВсе зависимости, которые **используются в приложении**: Реакт, [normalize.css](https://necolas.github.io/normalize.css/) из курса по вёрстке, [react-day-picker](http://react-day-picker.js.org/) для работы с датами и другие.\n\n#### devDependencies\n\nЗависимости, которые **помогают работать приложению**: Еслинт, Преттир, Вебпак и другие.\n\nЧтобы установить все пакеты проекта из `package.json`, есть команда `yarn` (альяс к `yarn install`).\n\n## react-scripts и create-react-app\n\nНастройку закончили, переходим к практике.\n\n[react-scripts](http://npm.im/react-scripts) (да, ссылка на нпм, но со всеми нпм-пакетами работаем через Ярн) это пакет, который содержит в себе готовые настройки для Вебпака, Еслинта и Бейбеля — о них мы поговорим в будущем.\n\nОтличие `react-scripts` от бойлерплейтов в том, что у вас нет кучи конфигов в проекте, они все скрыты от вас в глубинах `node_modules/react-scripts/...`.\n\nЧтобы воспользоваться мощью r-s, достаточно поставить как зависимость и прописать два скрипта в `package.json`:\n\n```js\n...\n{\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\"\n  }\n}\n```\n\nНо вместо этого давайте воспользуемся официальным способом: [`create-react-app`](https://github.com/facebook/create-react-app).\n\nCRA это утилита, которая создаёт проект с `react-scripts` и несколькими компонентами для демонстрации. CRA ставится глобально в систему через Ярн либо можно воспользоваться командой `yarn create ...`:\n\n```sh\n# не будет ставить в систему,\n# а временно скачает и после удалит\n# [dir] это ваша будущая директория, пишется без скобок\nyarn create react-app [dir]\n```\n\n> Кстати, `yarn create ...` ищет пакет с названием `create-*` и вызывает его, поэтому вы можете в будущем воспользоваться `yarn create react-native-app` для создания проекта через [`create-react-native-app`](npm.im/create-react-native-app)\n\nСоздайте через CRA проект `aviasales-demo-frontend`\n\n![](https://i.imgur.com/otVt2pZ.png)\n\nДавайте взглянем на структуру директорий:\n\n```sh\n/private/tmp $ ls -al aviasales-demo-frontend\ntotal 752\ne     Mar  3 22:38 .\ne     Mar  3 22:37 ..\ne     Mar  3 22:38 .gitignore\ne     Mar  3 22:38 README.md\ne     Mar  3 22:38 node_modules\ne     Mar  3 22:38 package.json\ne     Mar  3 22:38 public\ne     Mar  3 22:38 src\ne     Mar  3 22:38 yarn.lock\n```\n\n* `.gitignore` если вы проходили [Гитхауту](https://githowto.com) из урока инструментов, вы знаете зачем нужен этот файл. Если нет — идите читать.\n  CRA создал этот файл с директориями и файлами, которые нужно кинуть в игнор в Гите;\n* `node_modules` — все модули проекта. Туда лезть никогда нельзя;\n* `package.json` — главный конфиг проекта, от него работают Ярн и нпм;\n* `src` — директория, где вы пишете код;\n* `public` — лучше всего ответит документация react-scripts, [Using the `public` Folder](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#using-the-public-folder);\n* `yarn.lock` — файл Ярна, где он хранит информацию обо всех установленных пакетах проекта.\n* `build` — этой директории пока нет, но мы с ней разберёмся на третьем этапе.\n\n> Я горячо рекомендую сначала прочитать [документацию](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md) `react-scripts`: даже если вы не поймёте, это пассивные знания, которые могут всплыть когда вам они понадобятся, в противном случае вы будете бегать с горящей жопой и не знать что искать когда возникнет проблема. Как вы понимаете, это правило универсально для всех инструментов, которые вы будете использовать. **Знайте свой инструмент.**\n\n[Официальный Юзер Гайд](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md) очень полный, я подчеркну несколько моментов:\n\n* [Displaying Lint Output in the Editor\n  ](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor),\n* [Installing a Dependency](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#installing-a-dependency),\n* [Importing a Component](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#importing-a-component),\n* [Adding a Stylesheet (CSS)](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-a-stylesheet),\n* [Adding Images, Fonts, and Files](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-images-fonts-and-files),\n* [Using the `public` Folder](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#using-the-public-folder).\n\nМожно ли использовать `react-scripts` в своём проекте не создавая проект через `create-react-app`? Можно, но не забудьте о том, что `react-scripts` ориентируется на [определенную структуру](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#folder-structure).\n\nОкей, с этим разобрались. Запускаем проект через команду `yarn start` и начинаем кодить.\n\n![](https://i.imgur.com/vgg5KyM.png)\n\nЗапускаем браузер по указанному адресу и видим наш сайт:\n\n![](https://i.imgur.com/9O7coV0.png)\n\nОткрывайте в Вскоде `src/App.js` и узрите тот самый Джсх, который наконец-то работает!\n\n### Настройка Вскода для проекта\n\nПоставьте три плагина: `mgmcdermott.vscode-language-babel`, `dbaeumer.vscode-eslint` и `esbenp.prettier-vscode`.\n\n#### language-babel\n\nПодсветка синтаксиса: он работает с ES2015+ (стандарт Джаваскрипта), JSX и другими вещами. Вообще, [`babel`](http://babeljs.io/) это парсер Джаваскрипта и компилятор в понятный браузерам: например, вы можете использовать ES2018 сегодня, а Бейбел переведет их в ES5 (который поддерживают все браузеры). Почему пакет называется `language-babel`? Потому что `babel` это в первую очередь парсер и этот пакет его использует.\n\n#### eslint\n\nПлагин к [ESLint](http://eslint.org/). Еслинт — удобная утилита для проверки качества вашего кода. У него есть плагины и готовые конфиги, в [`create-react-app`](https://github.com/facebookincubator/create-react-app) ставится свой, достаточно мягкий. В будущем мы будем использовать [стайлгайд от Эйрбнб](https://github.com/airbnb/javascript) — вот он лютый.\n\n#### prettier\n\n[Преттир](https://prettier.io/) это форматер кода. Больше никаких споров про отступы, переносы, запятые с точками и прочего.\n\n#### Настройки\n\nЭти настройки идут в дополнение к вашим, а не полностью их заменяют. Разбирать их не буду, из значений, думаю, понятно что к чему относится, но если нет — не забудьте в чате прояснить.\n\n```javascript\n{\n  \"editor.tabSize\": 2,\n  \"editor.formatOnSave\": true,\n  \"editor.formatOnPaste\": true,\n  \"prettier.eslintIntegration\": true,\n  \"javascript.format.enable\": false,\n  \"javascript.validate.enable\": false,\n  \"files.associations\": {\n    \"*.jsx\": \"javascriptreact\",\n    \"*.js\": \"javascriptreact\"\n  },\n  \"emmet.syntaxProfiles\": {\n    \"javascript\": \"jsx\"\n  }\n}\n```\n\n#### Интеграция Еслинта и Вскода в проекте\n\nПосле того, как создадите приложение через `create-react-app`, вам нужно будет связать еслинт из него с плагином в Вскоде. Как это сделать? Ответ в [официальной документации](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#displaying-lint-output-in-the-editor).\n\n---\n\n## Возвращаемся к проекту\n\nОкей, Вскод настроили, всё заработало, теперь нужно разобраться что за код в `src/App.js`: импорты, экспорты и классы это нечто новое.\n\n```jsx\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n### Джс: импорты и экспорты\n\nВ 2015 году в Джсе появилась система импортов и экспортов. Если вкратце, то один файл может экспортнуть выражение, а второй — импортнуть. Это называется **модулями**.\n\nВ Джс экспорты бывают дефолтные и именованные.\n\n#### Дефолтные\n\n```javascript\n// sum.js\nexport default function(left, right) {\n  return left + right;\n}\n\n// app.js\nimport sum from \"./sum.js\";\n\nsum(1, 4); // 5\n```\n\nНа самом деле, мы можем называть наш импорт как угодно:\n\n```javascript\nimport fuckThis from \"./sum.js\";\n\nfuckThis(1, 4); // 5\n```\n\n#### Именованные\n\nНо как быть, если вы хотите экспортнуть несколько констант или функций из одного файла? Для этого есть **именованные экспорты**.\n\n```javascript\n// math.js\nexport function sum(left, right) {\n  return left + right;\n}\n\nexport const divide = (left, right) => {\n  return left / right;\n};\n\nexport const mainNumber = 42;\n\n// app.js\nimport { mainNumber, sum, divide } from \"./math.js\";\n\ndivide(mainNumber, sum(2, 4)); // 7\n```\n\nДжс сначала выполнит `sum(2, 4)`, который вернёт `6`, затем это число подставится как второй аргумент `divide`.\n\nЗдесь у нас нет роскоши именовать как угодно, но мы можем импортить `as`:\n\n```\n// app.js\nimport { mainNumber as myLovingNumber } from './math.js';\n```\n\n#### Модули работают через Вебпак\n\nВебпак — это бандлер модулей. В какой-то момент создатель Вебпака подумал: а зачем нам копировать файлы, подключать всё в `index.html` по-старинке, если мы можем в джс-файлах импортить **вообще всё что угодно**?\n\n![](https://i.imgur.com/3oQKttO.png)\n\nДля этого используются **лоадеры**. Вам пока об этом думать не нужно, но вкратце объясню, что лоадеры отвечают за то, что вернёт импорт.\n\nНапример, если мы импортим ЦСС-файл, то сработают лоадеры [`style-loader`](https://github.com/webpack-contrib/style-loader) и [`css-loader`](https://github.com/webpack-contrib/css-loader) и Вебпак вставит ЦСС-код в `<style></style>` теги в начале страницы.\n\nЕсли мы импортим шрифты, картинки или ещё что, сработает [`file-loader`](https://github.com/webpack-contrib/file-loader), который при импорте вернёт сгенерированный путь к файлу.\n\n```javascript\nimport logo from \"./logo.svg\";\n\nconsole.log(logo); // \"/static/images/0dcbbaa7013869e351f.png\"\n```\n\nКстати, при импорте директории Вебпак по-умолчанию лезет за `index.js` или `index.jsx` файлом, поэтому не нужно писать `import Header from './Header/index.js`, да `.js` можно было бы опустить:\n\n```js\nimport Header from \"./Header\";\n```\n\n### Реакт: классовые компоненты\n\nОкей, с импортами и экспортами разобрались, теперь нас интресует второй новый синтаксис:\n\n```js\nclass X extends Component {\n  render() {}\n}\n```\n\nЭто классы, а если конкретнее — классовый компонент Реакта. Мы с этим ещё разберёмся в будущем, сейчас лишь хочу сказать что классовый компонент конкретно здесь идентичен функциональному: метод `render()` в классе тоже должен вернуть дерево элементов.\n\n### Реакт: Джсх\n\nСобственно, Джсх и отвечает за дерево элементов. Про Джсх мы говорили в четвертом уроке, давайте для примера переведём наше приложения про фильмы на Джсх и избавимся от `React.createElement`.\n\n#### Старый createElement\n\n```js\n// создаём компонент Img, который возвращает <img />\nfunction Img(props) {\n  return React.createElement(\"img\", {\n    className: props.className,\n    src: props.src,\n    alt: props.alt\n  });\n}\n\n// создаём компонент Movie, который возвращает\n// |---------| 2001: A Space Odyssey\n// |---------|\n// |---------|\n// |---------|\n// |---------|\n// |_________|\nfunction Movie(props) {\n  return React.createElement(\n    \"div\",\n    { className: \"movie-page\" },\n    // чилдреном может быть массив\n    [\n      // создаём элемент из компонента Img\n      React.createElement(Img, {\n        className: \"movie-img\",\n        src: props.imgSrc,\n        alt: props.title\n      }),\n      React.createElement(\"h1\", { className: \"movie-title\" }, props.title)\n    ]\n  );\n}\n\n// создаём\nconst App = React.createElement(Movie, {\n  title: \"2001: A Space Odyssey\",\n  imgSrc: \"https://i.imgur.com/vaZoNCA.jpg\"\n});\n\nReactDOM.render(App, document.getElementById(\"app\"));\n```\n\n#### Новый Джсх\n\n```jsx\n// src/App.js\nfunction Img(props) {\n  return <img src={props.src} className={props.className} alt={props.alt} />;\n}\n\nfunction Movie(props) {\n  return (\n    <div className=\"movie-page\">\n      <Img className=\"movie-img\" src={props.imgSrc} alt={props.title} />\n      <h1 className=\"movie-title\">{props.title}</h1>\n    </div>\n  );\n}\n\nexport default Movie;\n```\n\nАккуратнее стало? Намного!\n\n---\n\nПочему мы избавились от `ReactDOM.render()`? Потому что этим занимается `src/index.js`.\n\nВ чём отличие `index.js` от `App.js`? `App.js` это главный файл **реакт**-приложения, а `index.js` — **фронтэнд**-приложения: в вашем проекте может быть много других сторонних библиотек, с которыми нужно будет работать.\n\n## Итог\n\nУрок получился большой и даже больше про настройку, но в конце мы получили проект, с которым можно работать и для этого нам не нужно заниматься настройкой Вебпака.\n\nПомните, что `create-react-app` и конкретно `react-scripts` это ваше спасение и он подходит даже для крупных проектов, поэтому стесняться его не надо.\n","id":"qFzHqCRQh2","stageId":"9wO7ihaBIk"}