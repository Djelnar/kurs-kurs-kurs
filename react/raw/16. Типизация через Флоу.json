{"stage":3,"title":"Типизация через Флоу","subTitle":"Делаем Джаваскрипт чуть более надёжным языком","markdown":"Джаваскрипт в целом неплохой язык: хоть у него много проблем, он развивается и с приходом релизов [ES2015](http://babeljs.io/learn-es2015/) (и выше) он стал реально удобным.\n\nНо у него есть несколько родовых проблем, которые мешают разработке.\n\n* **отсутствует семантика**: для проверки на тип есть глобальная функция `isNaN(x)`, метод массива `Array.isArray(x)` и оператор `typeof x`;\n\n* **плохие неочевидные слабые динамические типы**: посмотрите великое видео [WAT](https://www.destroyallsoftware.com/talks/wat), а потом прочтите [Как унизить джаваскриптера](https://medium.com/@vkozulya/e0aa256a8905)\n\n* **омерзительная работа с датами**: спустя года разработки лично я до сих пор не могу вспомнить когда использовать `new Date()`, а когда просто `Date()`; к счастью, эту проблему решает [date-fns](http://date-fns.org/)\n\n* **очень слабая стандартная библиотека**, поэтому приходится использовать [lodash](https://lodash.com/), благо что он модульный.\n\n* **слабая консистентность**: метод [`Array.prototype.slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) (возвращает отрезанный кусок массива) не мутирует оригинальный массив, а [`Array.prototype.splice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) (вставляет элемент в массив) — мутирует.\n\nНо Джаваскрипт-то развивается, а то, что нельзя исправить в спецификации (из-за обратной совместимости) — исправляется сообществом с помощью транспайлеров (помните про [Бейбель](http://babeljs.io/)?).\n\nПроблему с типами решил Фейсбук с помощью [Флоу](https://flow.org/). _А Майкрософт — [Тайпскриптом](https://www.typescriptlang.org/)._\n\n## Флоу\n\nЗачем вообще нужно работать с типами?\n\nНа системном уровне — чтобы компилятор делал за вас проверки, а не вы в продакшене узнавали о том, что что-то сломалось (например, с помощью [Сентри](https://sentry.io/)).\n\nНа бытовом: текстовый редактор показывает что нужно передать в функцию и что она вернёт — не нужно самому помнить.\n\n![](https://i.imgur.com/oHM9D5E.png)\n\nВажно понимать: если вы будете писать типы, это вначале замедлит разработку, но окупится позже.\n\n[Начать работать](https://flow.org/en/docs/getting-started/) (и [интегрировать](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-flow) в react-scripts) с Флоу легко:\n\n1.  ставите в проект [`flow-bin`](http://npm.im/flow-bin),\n2.  запускаете команду `yarn flow init` чтобы создать [`.flowconfig`](https://flowtype.org/docs/advanced-configuration.html),\n3.  в каждом файле который вы хотите обложить тестами, добавляете первой строчкой `// @flow`,\n4.  запускаете `yarn flow` (например, на этапе билда),\n5.  читаете ошибки и исправляете их!\n\nВ Вскоде поставьте [Flow Language Support](https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode).\n\n## Как писать свои типы\n\nДа легко: у аргумента функции пишете её [тип](https://flow.org/en/docs/types/), а после аргументов — что она вернёт.\n\n```js\nfunction square(n: number): number {\n  return n * n;\n}\n\nsquare(\"2\"); // Error!\n```\n\n## Где искать типы к чужим библиотекам\n\nДопустим, вы используете готовую библиотеку — [react-helmet](https://npm.im/react-helmet) или [react-intl](https://npm.im/react-intl), но они не поставляют типы. Этим вообще редко кто занимается.\n\nПоэтому существует [flow-typed](https://github.com/flowtype/flow-typed): центральный репозиторий с типами к библиотекам из Нпма.\n\nРаботать с ним легко:\n\n1.  ставите Ярном `flow-typed` (это CLI) в проект;\n2.  запускаете через `yarn flow-typed`: он установит типы для пакетов из `package.json`;\n3.  добавляете директорию `flow-typed` в `.gitignore`, а то репозиторий превратится в мусорку.\n\nВсё! Теперь вам доступны [типы флоу-тайпед](https://github.com/flowtype/flow-typed/wiki/Importing-And-Using-Type-Definitions). Импортите их и носите на здоровье.\n\n## Итог\n\nВ этом уроке вы познакомились с Флоу — системой проверки типов в Джаваскрипте, да и с самими типами тоже познакомились.\n\nКакой вывод? Типы важны, но они замедляют начальную разработку.\n\nКстати, если вам интересно — погрузитесь в то, как [устроен](https://flow.org/en/docs/lang/) Флоу.\n","id":"vzgNWlOPx5","stageId":"tHKYMIR4QG"}