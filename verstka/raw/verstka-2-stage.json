{
  "stageName": "Этап второй: основной",
  "lessons": [
    {
      "stage": 2,
      "title": "Правила вёрстки",
      "subTitle": "Прежде чем идти дальше, нужно научиться нормально верстать",
      "markdown": "Привет! Вы получили первое большое задание — сверстать макет UberEats.\n\nНо мы до этого проходили достаточно примитивные вещи, а сейчас — огромный пакет. Как подступиться?\n\n<p class=\"announce\">\n  Помните главный принцип: от общего к частному.\n</p>\n\nЭтого принципа вам нужно придерживаться всегда: когда вы разбиваете задачи на мелкие, когда вы верстаете целую страницу, когда вы придумываете имена селекторами. От общего к частному.\n\n## Чистый код\n\nПервое, что вам нужно запомнить — ваш код должен быть чистым. Не идеальным, а чистым.\n\nДаже если вы написали говнокод, он должен быть красиво отформатирован: нельзя, чтобы у кода плясал стиль — отступы, иМеНоВАнИе ТеГоВ и КЛ_АССОВ.\n\nНо помните, что стиль кода не должен быть причиной для споров. Просто используйте общедоступный стайлгайд ([codeguide.co](http://codeguide.co) для вёрстки, [airbnb/javascript](https://github.com/airbnb/javascript) для джса), настройте редактор на него и забудьте. Не тратьте ваше время на споры про табы или пробелы — вам нужно код писать, а не этой мелочью заниматься.\n\nВ Вскоде есть встроенный форматтер для вёрстки, а для Джса можно ставить [prettier](http://prettier.io).\n\n## Семантика\n\nЧасто спрашивают \"зачем нужны все эти теги, если можно просто дивами пользоваться! это же не так неудобно\".\n\nСемантика нужна людям и машинами: людям она помогает отделять логические блоки, машинам — распознавать разметку и строить понимание страницы.\n\nЕсли вы будете видеть `<footer>` в хедере, вы же удивитесь? А если `<aside>` для оформления блоков-этажей? Странно ведь будет: вы же не едите сок вилкой, верно?\n\nСемантичный код удобно считывать: «о, здесь навигация, раз она в `<nav>`, а здесь у нас какой-то большой блок, раз он в `<section>`».\n\n## Используйте готовые решения\n\nНе плодите своих велосипедов, используйте готовое решение. Используйте `normalize.css`, а не руками пишите `* { padding: 0 }`.\n\nВ будущем мы познакомимся с пакетным менеджером для фронтэнда и бэкэнда на джаваскрипте: [npm](https://npmjs.com).\n\n## Стилизуйте только по классам\n\nВ вёрстке принято стилизовать только по классам: по тегам слишком опасно, а айди нужен для внутренних ссылок на блоки и для джаваскрипта.\n\nОчень плохо\n\n```css\nh1 {\n}\n#title {\n}\nheader > h1 {\n}\nfooter ul li {\n}\n```\n\n## Списки используйте только для списков\n\nНе нужно оформлять элементы через `ul / li` — списки используются только для списков в тексте, их не нужно тащить для оформления списка карточек или чего-то ещё.\n\n## Стройте страницу по голым этажам, а потом — стилизуйте\n\nПервое, что нужно сделать в вёрстке — накидать каркас страницы, а потом его стилизовать.\n\nВ дизайне и вёрстке есть термин \"этаж\" — это блок. Насколько я помню, термин прошёл из [Бюро](https://bureau.ru), про этажи наглядно раскрывается в этих советах:\n\n* [Как комбинировать ритмы колоночных сеток?](https://bureau.ru/bb/soviet/20131104/),\n* Как теория близости работает в интерфейсе: часть [первая](https://bureau.ru/bb/soviet/20160510/) и [вторая](https://bureau.ru/bb/soviet/20160503/),\n* [Что должен знать дизайнер об интерлиньяжах, полях, отступах, кеглях, выравниваниях и модульных сетках?](https://bureau.ru/bb/soviet/20140224/).\n\nОтверстайте страницу сначала этажами, а потом — стилизуйте. Так будет проще найти общие элементы и не придется плодить стили.\n\n## Используйте БЭМ\n\n[БЭМ](https://ru.bem.info) — это правила именования классов. БЭМ — это компонентный подход \"на минималках\", как говорится: если у вас под рукой только ХТМЛ и ЦСС, то БЭМ отлично подойдёт.\n\nЕсли вам кто-то рекомендует не использовать БЭМ, то это потому, что человек уже использует другие способы компонентного подхода: [CSS Modules](https://github.com/css-modules/css-modules) или [styled-components](https://www.styled-components.com/).\n\nТак что запомните: БЭМ отличный, когда под рукой только ХТМЛ и ЦСС.\n\n## Следите за дизайном\n\nОбращайте внимание на шрифты, отступы, не вздумайте от себя что-то придумывать, если дизайн кривой — скажите об этом дизайнеру, а не пытайтесь сами изменить.\n\nОчень часто фронтэндеры убивают дизайн — не обращают внимания на шрифты, отступы между элементами ставят от пизды. Это неправильно.\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly"
      ],
      "isPublic": true,
      "id": "iZzoQdvKTy",
      "stageId": "u8xwpb0kWl"
    },
    {
      "stage": 2,
      "title": "Позиционирование в ЦСС",
      "subTitle": "Не весь ЦСС умещается в блочную модель",
      "markdown": "Помните про флоу документа и блочную модель из пятого урока? Элементы идут друг за другом, между ними есть марджины, а внутри них — паддинги.\n\nНо что делать, когда вам нужно элемент выбить из потока? Допустим, расположить кнопку где-нибудь слева снизу? Как у Гугла кнопка FAB в Материал дизайне.\n\n![](https://i.imgur.com/WoMPIsl.png)\n\n## Позиционирование\n\nДля этого в ЦСС есть методы позиционирования: позицией блока можно управлять через свойства [`position`](https://developer.mozilla.org/en-US/docs/Web/CSS/position) и [`top`](http://cssreference.io/property/top/), [`left`](http://cssreference.io/property/left/), [`right`](http://cssreference.io/property/right/), [`bottom`](http://cssreference.io/property/bottom/).\n\nДефолтное поведение `position: static` — блок учитывает флоу документа и всё у него хорошо. Топ/лефт/райт/боттом не работают.\n\nДругие значения: `absolute`, `relative`, `fixed` и `sticky`.\n\n### Абсолютное `absolute`\n\nЕсли вы укажете `position: absolute` и какие-нибудь значения из топ-лефт-райт-боттом, то элемент будет спозиционирован относительно экрана: `top: 2px; left: 10px` вынесет его сверху влево.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/8qp226xv/2/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n##### Про блочную модель\n\nКак вы видите, абсолютное позиционирование ломает блочную модель: блочные элементы начинают вести себя как инлайн-блочные — занимают не всю ширину, а только контент текста и паддингов.\n\nКак исправить это? Вам нужно, чтобы блок всё равно занимал 100% ширины, а `width: 100%` не помогает (конечно, 100% от чего?).\n\nРастяните блок через `left: 0; right: 0` .\n\n### Относительное `relative`\n\nЕсли **родителю** задать `position: relative`, то его ребёнок с `position: absolute` будет учитываться относительно родителя.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/8qp226xv/1/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n### Зафиксированное `fixed`\n\nПри `fixed` элемент остается фиксированным при скролле.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/8qp226xv/3/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n### Стики `sticky`\n\nПока ещё не во всех браузерах работает ([caniuse.com/position-sticky](https://caniuse.com/#feat=css-sticky)), но в будущем — очень полезная вещь.\n\nДо того, пока блок находится на экране — он ведёт себя в потоке. Когда вы его скроллите и он должен пропасть — он фиксируется как будто `position: fixed`.\n\n_(демка будет работать только в браузерах, которые указаны на ([caniuse.com/position-sticky](https://caniuse.com/#feat=css-sticky))_\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/8qp226xv/6/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n## `z-index`\n\nКогда мы говорим про позиционирование, нужно помнить, что блок размещается по трём сторонам: `x`, `y`, `z`. За `x` и `y` отвечают `left`, `right` и `top`, `bottom`, а как наложить один элемент поверх другого? Используйте `z-index`.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/8qp226xv/7/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy"
      ],
      "isPublic": true,
      "id": "dXE2elcH7C",
      "stageId": "u8xwpb0kWl"
    },
    {
      "stage": 2,
      "title": "Формы в ХТМЛ",
      "subTitle": "Блеск и нищета форм в ХТМЛ",
      "markdown": "В вебе очень много форм — зайдите на любой сайт, точно найдёте хотя бы один инпут. Сегодня мы поговорим о том, как строить формы — это не очень-то и легко, на самом деле: ведь нужно не забывать про <abbr title=\"accessibility, 11 — потому что между `a` и `y` 11 букв\">a11y</abbr>.\n\n## [`form`](http://htmlreference.io/element/form/)\n\nСамый базовый элемент, в котором находятся другие контролы — инпуты, чекбоксы, селекты, кнопки.\n\nДавайте разберём частые и непонятные атрибуты, остальные — посмотрите на cssreference.\n\n### action — адрес\n\nВ экшен мы указываем адрес, куда отправится форма. Обычно это адрес ХТТП-ресурса, который сможет принять запрос (помните второй урок?). Например, если у вас форма поиска, то, скорее всего, у сервера будет ресурс `/search` (но это не факт!).\n\n### method\n\nХТТП-метод, который принимает запрос: гет или пост. Уточняйте у своего бэкэндера.\n\n### enctype\n\nЕсли расшифровывать, **encoding type** — формат, в котором нужно передать данные. Уточняйте у бэкэндера.\n\nЗначения:\n\n* `enctype=\"application/x-www-form-urlencoded\"` — дефолт,\n* `enctype=\"text/plain\"` — чистый текст, используется редко,\n* `enctype=\"multipart/form-data\"` — для загрузки файлов.\n\n## [`select`](http://htmlreference.io/element/select/) и [`option`](http://htmlreference.io/element/option/)\n\nСелект это выпадающий список со значениями, которые указаны через `option`.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/4f4pcku7/embedded/result,html\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n### Про `option` в `value`\n\nУ `option` есть атрибут `value` — это то, что используется как данные при отправке формы. Между тегами может быть написано всё что угодно, но уйдёт значение из `value`.\n\n### Про стилизацию селектов\n\nХочу уточнить, что селекты рисуются системой — поэтому они в разных системах выглядят по-разному. Можно ли их стилизовать? Увы, нет — вы не сможете застилизовать открытый список, но сможете сам селект, если предварительно сбросите стиль через [`appearance`](https://css-tricks.com/almanac/properties/a/appearance/).\n\nНе забывайте про поддержку браузеров! [Работает далеко не во всех](https://caniuse.com/#feat=css-appearance), а в тех, что работает — нужны [вендорные префиксы](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix) `-moz-` и `-webkit-`.\n\nКак стилизовать тогда без этого свойства? Через позиционирование и [`opacity`](http://cssreference.io/property/opacity/): вы скрываете сам селект, а под него (через `z-index`) кладёте застилизованный элемент (например, кнопку).\n\n## [`button`](http://htmlreference.io/element/button/)\n\nКнопки! Ну тут всё просто: можно задать тип через `type`: либо `submit`, либо `reset` — в первом случае нажатие на кнопки отправит данные на сервер, во втором — сбросит.\n\nПо-умолчанию стоит `submit`, поэтому будьте осторожны — можно случайно заставить кнопку сброса отправлять данные, если забудете проставить тип.\n\n## [`textarea`](http://htmlreference.io/element/textarea/)\n\nБольшое поле ввода.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/6mpozguc/embedded/result,html/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nОбязательное поле `name` — имя контрола, нужно, чтобы разграничивать на сервере одни данные от других (вы же не отправите имя как фамилию, верно?). Кстати, к селекту тоже относится — каждому контролу, с которым взаимодействует пользователь, нужно задавать `name`.\n\n## [`input`](http://htmlreference.io/element/input/)\n\nСамый богатый контрол из всех форм. Дело в том, что он может вести себя абсолютно по-разному только благодаря атрибуту `type`: `text`, `password`, `email`, `number` будут вести себя как обычный инпут ввода, но на мобильных девайсах будет заметна разница: клавиатура будет меняться у `email` и `number`. Ну и, конечно же, нужно будет соблюдать формат: от `email` будет ожидание что там емейл, а в `number` нельзя будет ввести текст.\n\n### `type=\"checkbox\"`\n\nЧекбокс это контролы, которые можно выбрать несколько раз.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/puurw9ow/2/embedded/result,html/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n### `type=\"radio\"`\n\nЧем радио отличается от чекбокса? Тем, что из радио под одним `name` можно выбрать только одно значение.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/puurw9ow/3/embedded/result,html/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nКстати, как я сделал так, чтобы при клике на текст выбиралось значение?\n\n## [`label`](http://htmlreference.io/element/label/)\n\nЧерез `label`! Тег лейбл либо обрамляет элемент:\n\n```html\n<label>\n  <input name=\"js-library\" value=\"react\" type=\"radio\">\n  Реакт\n</label>\n```\n\nлибо работает через атрибут `for` и связывается с контролом через `id`:\n\n```html\n<input id=\"js-library-react\" name=\"js-library\" value=\"react\" type=\"radio\">\n<label for=\"js-library-react\">Реакт</label>\n```\n\n## Итог\n\nДавайте запомним правила:\n\n* всегда должен быть тег `form` при работе с формами,\n* нужно не забывать про `name`,\n* в ХТМЛ есть разные контролы — от чекбоксов до текстареи,\n* не забывайте про `label` — не просто воткнуть его на страницу, а обрамить им контрол либо использовать через атрибуты `for` и `id`.\n\n## Задание\n\nЗадания не будет, потому что самая богатая форма уже сделана на [htmlreference](http://htmlreference.io/element/form).\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C"
      ],
      "isPublic": true,
      "id": "4ipvf7K5px",
      "stageId": "u8xwpb0kWl"
    },
    {
      "stage": 2,
      "title": "a11y — в мире бывает не только ваш браузер",
      "subTitle": "Как позаботиться о всех людях на сайте и быть хорошим разработчиком",
      "markdown": "Привет! Сегодня мы говорим о важной теме: <abbr title=\"accessibility, 11 — потому что между `a` и `y` 11 букв\">a11y</abbr>.\n\nГлавное правило, которое нужно запомнить: a11y не про людей с инвалидностью. a11y важен всем, хороший разработчик отличается от плохого вниманием к деталям: вам нужно заботиться о всех ваших пользователях, а не только о тех, что пользуются тем же браузером и живут как вы. Давайте разбираться.\n\nДля начала я хочу вас познакомить с проектом [a11yproject](https://a11yproject.com/) — ребята [давно и планомерно](https://a11yproject.com/about) занимаются a11y, переводить их нет смысла: лучше читать первоисточник. И, конечно же, нужно помнить об [MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility).\n\nНа самом деле, a11y это очень обширная тема, взгляните что [на эту тему думает](https://www.w3.org/standards/webdesign/accessibility) W3C (консорциум, который создаёт стандарты): [одних только стандартов 8 штук](https://www.w3.org/standards/webdesign/accessibility#specifications)! Поэтому в этом уроке мы поговорим об основе основ, а дальше вы уже сами погрузитесь.\n\n## Что такое a11y\n\nA11y это доступность вашего сайта для всех людей. Как я и сказал, a11y не только для людей с инвалидностью, a11y вообще для всех: пользователи вашего сайта должны им нормально пользоваться.\n\nНа мой взгляд, это касается двух вещей:\n\n* работа сайта,\n* обратная связь\n\n## Работа сайта\n\nПод работой сайта я подразумеваю, что сам сайт должен работать понятно и не путать людей. Давайте пройдёмся по списку.\n\n### Семантика\n\nсемантика король доступности — если сайт правильно свёрстан, то, во-первых, его поддерживать легче, а во-вторых, браузерам и другим машинам его читать легче.\n\n### Контрастность\n\nВ дизайне должна быть нормальная контрастность, потому что не у всех идеальное зрение. Если вы делаете серый текст на белом фоне, не все смогут его прочитать — у людей часто бывают нарушения зрения и либо им придётся очень стараться, либо они вообще не увидят.\n\nПосоветуйте дизайнеру две ссылки:\n\n* [российский проект Веблайнд](https://weblind.ru/),\n* [чекер контраста](http://accessible-colors.com/).\n\nДа, именно вы должны советовать дизайнеру — это вы реализовываете сайт, а не он, вам отвечать за конечный результат. Берите ответственность в свои руки.\n\n### Ясность\n\nПерекликается с семантикой, но чуть обширнее.\n\nВо-первых, конечно же, когда кнопка сделана тегом `button`, это _яснее_, чем кнопка через `div`.\n\nВо-вторых, не забывайте про `alt` у изображений и `title` у других элементов — если изображение не загрузилось, нужно через `alt` объяснить его контент. И, конечно же, `label` из предыдущего урока тоже относится к _ясным_ подсказкам о **назначении** элемента.\n\nВ-третьих, в вёрстке есть сравнительно [новый стандарт WAI-ARIA](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/WAI-ARIA_basics) (либо можно прочесть [спецификацию W3C](https://www.w3.org/TR/wai-aria-1.1/)).\n\nWAI-ARIA предназначен для современных веб-приложений (не сайтов!), чтобы всякие Реакты не ломали a11y. Честно говоря, они и так не ломают, но ломают люди, которые в погоне за модным инструментом забывают об a11y.\n\nПочитайте спеку — она увлекательна. Сейчас мы её не будем рассматривать, потому что она нужна для веб-приложений, мы ими не занимаемся на этом курсе.\n\n## Обратная связь\n\nВторое, что нужно помнить — про обратную связь. Всегда думайте о том, чтобы человеку было понятно, что случилось.\n\nСмотрите, что я имею в виду: вам нужно заботиться не только о том, какой красивый сайт, но и о том, что произойдёт после действий пользователя.\n\nЕсли человек кликнул на кнопку — покажите это.\n\nЕсли навёл на неё курсор — покажи это.\n\nЕсли форма начала отправляться — покажите, что начался процесс.\n\nЕсли отправилась — покажите сообщение.\n\nЕсли не отправилась — покажите ошибки.\n\n## Напоследок — `outline: none`\n\nМогу лишь дать ссылку на сайт [outlinenone.com](http://www.outlinenone.com).\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C",
        "4ipvf7K5px"
      ],
      "isPublic": true,
      "id": "79Mt7wYOrs",
      "stageId": "u8xwpb0kWl"
    },
    {
      "stage": 2,
      "title": "Семантика, парсеры и поисковые системы",
      "subTitle": "Продолжаем заботиться о семантике и (не) стреляем себе в ноги, соблюдая её",
      "markdown": "Мы много говорим о семантике (постоянно!), но давайте разберём ещё один кейс, где она важна: поисковые системы и социальные сети.\n\nЗапомните: в большинстве случаев оптимизация от сеошников это карго-культ — где-то услышали, что новый приёмчик кого-то вывел в топ Яндекса и Гугла и вот бегом нужно делать. Важна только семантика, чтобы поисковики и социалки спарсили (парсинг — разбор) ваш сайт.\n\nПроверять семантику можно через [валидатор W3C](http://validator.w3.org/) — он подскажет где вы облажались и что нужно исправить. Ну а мы поехали!\n\n_PS: Кстати, для Хрома посоветую расширение [SEO META DATA in 1 CLICK](http://www.seo-extension.com/). Название хуже всех, признаю, зато оно самое удобное._\n\n## `<head>` как сборник всего важного\n\nВо-первых, у страницы должен быть чёткий `<title`, который обозначает контент страницы.\n\nВо-вторых, `meta description` и `meta keywords`: первое даёт описание страницы (выводится в поисковиках и социалках), а второе описывает ключевые слова, по которым можно найти.\n\n```html\n<meta name=\"description\" content=\"Описание страницы сайта до 140 символов\">\n<meta name=\"keywords\" content=\"ключевые, слова, страницы, через, запятую\">\n```\n\nНа самом деле ключевые слова не так важны — в последнее время поисковики увлеклись искусственным интеллектом и machine learning, поэтому контент страницы анализируют самостоятельно.\n\nВ-третьих, `<link rel=\"canonical\">`: если поисковик каким-то образом зайдёт на страницу по левому адресу (а они любят подбирать всё подряд), то каноникал поможет не задублировать страницы.\n\n```html\n<link rel=\"canonical\" href=\"https://erodionov.ru/verstka\">\n```\n\nВ-четвертых, если у вас есть понимание, на какую страницу дальше пойдёт человек, используйте `<link rel=\"prev\">` и `<link rel=\"next\">` — например, если вы работаете с пагинацией.\n\n```html\n<link rel=\"canonical\" href=\"https://jqestate.ru/zagorodnaya/prodaja\"/>\n<link rel=\"next\" href=\"https://jqestate.ru/zagorodnaya/prodaja?page=4\"/>\n<link rel=\"prev\" href=\"https://jqestate.ru/zagorodnaya/prodaja?page=2\"/>\n```\n\n### Про Опенграф\n\nДля социальных сетей используется протокол [Open Graph](http://ogp.me/) — он через мета-теги описывает страницу (нужно для карточек ссылок):\n\n```html\n<meta property=\"og:type\" content=\"website\"/>\n<meta property=\"og:locale\" content=\"ru_RU\"/>\n\n<meta property=\"og:title\" content=\"Курс по фронтэнду. Начинаем в январе.\"/>\n<meta property=\"og:description\" content=\"Бутиковый практический четырёхнедельный курс по фронтэнду. Сделай Airbnb и научись делать крутые интерфейсы.\"/>\n<meta property=\"og:url\" content=\"https://erodionov.ru/frontend\"/>\n<meta property=\"og:image\" content=\"https://erodionov.ru/static/images/frontend-cover-new-year-fb.png\"/>\n<meta property=\"vk:image\" content=\"https://erodionov.ru/static/images/frontend-cover-new-year-vk.png\"/>\n\n<meta name=\"twitter:card\" content=\"summary_large_image\">\n<meta name=\"twitter:site\" content=\"@evgenyrodionov\">\n<meta name=\"twitter:creator\" content=\"@evgenyrodionov\">\n```\n\nС опенграфом много мороки, например:\n\n* соцсети могут добавлять свой префикс (`vk:image`, `twitter:site`) и параметр. К счастью, они спокойно считывают и `og:`, если не указана специфика через свой;\n* Твиттер не может читать `meta property`, ему нужен `meta name` (но если есть `<meta property=\"og:...`, то он прочитает).\n\nДебажить (то есть проверять) можно через инструменты соцсетей:\n\n* [Facebook Debugger](https://developers.facebook.com/tools/debug/sharing),\n* [Twitter Card Validator](https://cards-dev.twitter.com/validator).\n\nУ ВК и Телеграма нет дебаггера, но можно сбросить кэш через\n\n* [api.pagesClearCahe](https://vk.com/dev/pages.clearCache),\n* [@WebpageBot](https://t.me/WebpageBot).\n\n## Сайтмап\n\nОкей, с `<head>` разобрались, дальше что? Дальше — сайтмап. Сайтмап (карта сайта) это [тоже протокол](https://www.sitemaps.org/protocol.html), который скармливают поисковику, чтобы он знал какие страницы на сайте есть.\n\nСайтмап обычно бывает в файле `sitemap.xml` и выглядит как у JQ Estate: https://jqestate.ru/sitemap.xml.\n\n## robots.txt\n\nКак поисковик поймёт, что сайтмап лежит по этому адресу? Можно ли указать другой? Можно ли запретить индексировать какие-то страницы? Да, для этого используется протоко… шучу, обычный файл `robots.txt`. Его формат описан на сайте [robotstxt.org](http://www.robotstxt.org/robotstxt.html).\n\n## Семантика страницы\n\nТем временем мы продолжим говорить про семантику. С `<head>` разобрались, а как строить саму страницу, чтобы поисковик понял что на ней?\n\n### Используйте заголовки h1-h6\n\nС `h1` мутная история: спецификация говорит, что `h1` можно использовать сколько угодно раз пока он облачён в `section` или `article`, но сеошники могут ныть, что должен быть только один `h1` на страницу. Спрашивайте у них из какого они года, знают ли они про HTML5 (стандарт HTML) и читали ли они [эту статью](https://webdesign.tutsplus.com/articles/the-truth-about-multiple-h1-tags-in-the-html5-era--webdesign-16824).\n\n### Используйте структурные теги\n\n`section`, `article`, `main` нужны, чтобы отделить один блок от другого. Желательно, конечно, чтобы у каждого блока было описание — через заголовок `h1`.\n\n## [Schema.org](https://schema.org), [JSON-LD](https://json-ld.org/) и [Microformats](http://microformats.org/wiki/about)\n\nДа, поисковикам недостаточно семантичной вёрстки, они настолько тупые, что они поддерживают целых три дополнительных способа структурировать данные на странице. И вам, как верстальщику, нужно это поддерживать — как минимум Schema.org.\n\n## Женя, это что за ад? Почему мы служим машинам?\n\nПотому что тяжела и неказиста жизнь верстальщика. К сожалению, хоть и ML/AI звучат из каждого угла, но нам до сих пор далеко до нормального понимания страницы системой. Соболезную я нам всем.\n\n## Итог\n\nСемантика важна — её отсутствие это стрельба в ноги не только себе (в портянке из дивов сложно разбираться), это боль не только для людей с инвалидностью, скринридеров и режима чтения в браузерах.\n\nОтсутствие семантики может принести вред даже белым богатым зрячим мужчинам с макбуками — потому что их сайты не будут выводиться в топ и их бизнес не будет зарабатывать денег.\n\n---\n\n_Кстати, почему на этом сайте почти нет семантики? Потому что нас пока не интересует трафик из поиска. Действуйте рационально и не превращайте всё в карго-культ._\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C",
        "4ipvf7K5px",
        "79Mt7wYOrs"
      ],
      "isPublic": true,
      "id": "7KIkWf2nMt",
      "stageId": "u8xwpb0kWl"
    },
    {
      "stage": 2,
      "title": "Работа с изображениями",
      "subTitle": "Растр и вектор, JPG и PNG, адаптивность, оптимизации, облачные хранилища, CDN — работа с изображениями это нелёгкая тема",
      "markdown": "Работа с изображениями в вёрстке это та ещё задача: выбрать правильный формат — jpg/png/svg/webp и др;, подумать об адаптивности — зачем на мобайле грузить большие изображения с десктопа; заморочиться с размерами — не все изображения будут одинаковой ширины и высоты. Ух! Давайте разбираться.\n\n## Растр и вектор\n\nПервое, чем отличаются изображения — форматом. Одни растровые, другие векторные.\n\n### Растровые\n\nИзображение состоит из сетки пикселей. Растровые изображения плохо масштабируются, потому что по сути вы увеличиваете размер пикселя.\n\n![](https://i.imgur.com/lyR5AR1.png)\n\n### Векторные\n\nВекторные изображения построены из геометрических фигур: точек, квадратов, кругов, кривых, _векторов_. Масштабируются отлично: потому что геометрия.\n\n## Форматы\n\nПо форматам легко: в JPG или PNG хранят фотографии и другой контент, а в SVG — иконки.\n\nЕщё у PNG есть прозрачность, а у JPG — качество сжатия: можно понизить \"вес\" файла просто поставив качество в 80% вместо 100%, особой разницы вы не заметите.\n\n![](https://i.imgur.com/XzhNFJa.png)\n\n## Оптимизация\n\nВ изображениях хранятся мета-данные — данные, которые в Вебе нам не особо нужны: фотоаппарат, используемый софт для обработки и другие. Обычно они хранятся в [EXIF](https://en.wikipedia.org/wiki/Exif). Все эти данные можно вырезать — это первый путь оптимизации.\n\nВторой: пожать само изображение (как в случае с процентным качеством JPG). Вручную это делать утомительно, поэтому есть [tinypng.com](https://tinypng.com/) — сервис, который сожмёт изображения.\n\nНо руками каждое изображение жать не очень удобно, поэтому есть много готовых библиотек. Одна из самых популярных [ImageMagick](https://www.imagemagick.org), её используют на серверах: человек залил изображение, оно прошло через ImageMagick и указанные настройки, затем сохранилось куда-то.\n\n## Хранение изображений\n\nКуда-то? Это куда? В проекте (мы же говорим про фронтэнд) можно хранить только иконки, а контентные изображения (например, фотографии меню, блюд или ресторанов) хранятся в облачных хранилищах и за них отвечает бэкэнд и база данных.\n\nКакие бывают облачные хранилища? Обычно используют [Amazon AWS S3](https://aws.amazon.com/s3/) либо аналоги от Гугла ([Google Cloud Storage](https://cloud.google.com/storage/)), Майкрософта ([Azure Blob Storage](https://azure.microsoft.com/en-gb/services/storage/blobs/)), DigitalOcean ([Digital Ocean Spaces](https://www.digitalocean.com/products/spaces/)) и других. Ещё есть [Uploadcare](https://uploadcare.com) — законченное решение вместе с виджетом и хранением.\n\n## CDN — распространение изображений\n\nКстати, хранение изображений это одно, а ведь нужно ещё отвечать за распространение! Этим занимается CDN — Content Delivery Network.\n\nВ самом примитивном варианте CDN раздаёт изображения с ближайшего до пользователя сервера: если вы в Европе, то явно вам нужно отдавать данные не из Японии, Франкфурт больше подойдёт.\n\nКак это работает? Банальным дублированием файлом на каждый сервер в каждом регионе — поэтому нужно обычно ждать несколько часов пока изображения появятся на всех CDN-точках провайдера.\n\nКак всегда, есть решения от Amazon ([Amazon AWS Cloudfront](https://aws.amazon.com/cloudfront/)), Google ([Google Cloud CDN](https://cloud.google.com/cdn/docs/)) и других.\n\n---\n\n## Зачем мне об этом знать? За это же отвечает бэкэнд?\n\nВам **нужно** об этом знать — вы отвечаете за сайт. Если фронтэндер не будет обращать внимания на вес изображений, на скорость загрузки и другие вещи — сайт будет работать медленно. **Интерфейс** будет работать медленно, бизнес будет терять деньги.\n\nПоэтому в ваших и только в ваших интересах форсить нарезку изображений (когда одно изображение режется несколько раз — для мобайла, планшета и десктопа), их сжатие, использование CDN и другие оптимизации.\n\n---\n\nПродолжим.\n\n## Нарезка под разные разрешения\n\nЯ упомянул, что изображения режутся под разные разрешения, а как понять как резать?\n\nВ своей практике я видел много подходов, но остановился на одном идеальном: уменьшать по высоте, а за высоту взять степень двойки.\n\n### Ограничение по высоте\n\nЧего? Почему по высоте? Потому что зачастую изображения на странице ограничены по высоте, но не по ширине: если вы поставите всем изображениям 256 пикселей ширины, то у одних высота будет в 452 пикселя, у других 211, у третьих 987.\n\nПредставьте такую ситуацию на сайте ЦУМ-а? Невозможно.\n\n![](https://i.imgur.com/BDjufA6.png)\n\nИли вот ещё пример: фотографии домов. Они могут быть 16:9, могут быть 4:3, могут 3:4, могут 16:10, но при подходе ограничения высоты это не играет никакой роли.\n\n![](https://i.imgur.com/UFix3mz.jpg)\n\n### Степень двойки\n\nА что за степень двойки? Это просто самый удобный формат, который легко запоминается: 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 и выше.\n\nПри таком подходе и ретина-изображения встают идеально: если вам для ретины нужна картинка в 256 пикселей, то берёте 512. Удобно!\n\n## Использование в вёрстке\n\nЕсть два подхода: либо `background-image`, либо тег `<img>`. Разница в их индексируемости поисковиками.\n\n### `<img>`\n\nИндексируются, особенно если прописывать `alt=\"\"` — описание изображения. Поисковики вас полюбят.\n\n### `background-image`\n\nНе индексируются.\n\n### Иконки\n\n[Гугл рекомендует](https://developers.google.com/web/fundamentals/design-and-ux/responsive/images#use_svg_for_icons) использовать svg и вставлять их либо через тег `<img>`, либо сразу в код; но второй подход неудобен, потому что представьте что вам нужно пройтись по всему проекту, чтобы заменить одну иконку?\n\n### Размеры изображения\n\nЕсли изображение находится в сетке, то обычно им задают ширину в 100% чтобы они растягивались. [→ Пример](https://jsfiddle.net/25mxyo01/4/embedded/result/).\n\nЕсли изображение на фоне или само по себе, то задают высоту, чтобы на всё остальное пространство оно растягивалось.\n\nЗадают только одну сторону, иначе есть риск сломать пропорции и изображение будет сжатым или растянутым.\n\n![](https://i.imgur.com/flnQraO.png)\n\n### Адаптивные изображения, плюс Ретина\n\nРаньше с адаптивностью была дичь — её вообще не было. Сейчас у нас есть тег [`picture`](http://htmlreference.io/element/picture/), его [поддержка](https://caniuse.com/#feat=picture) сейчас — 88.22%.\n\nОдин из его жирных плюсов — обратная совместимость: даже если браузер не поддерживает тег `picture`, то изображение всё равно будет у пользователя за счёт тега `img`.\n\nПример использования:\n\n```html\n<picture>\n  <source media=\"(max-width: 767px)\" srcset=\"https://via.placeholder.com/100x100/E61E7F/ffffff, https://via.placeholder.com/100x100/44BB51/ffffff 2x\">\n  <source media=\"(min-width: 768px)\" srcset=\"https://via.placeholder.com/768x100/E61E7F/ffffff, https://via.placeholder.com/768x100/44BB51/ffffff 2x\">\n  <img src=\"https://via.placeholder.com/768x100/E61E7F/ffffff\" srcset=\"https://via.placeholder.com/768x100/E61E7F/ffffff 2x\" alt=\"a head carved out of wood\">\n</picture>\n```\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/774s3y62/embedded/result/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nЕсли у вас Ретина, то изображение будет зеленым, а если нет — розовым.\n\n## Итог\n\nЕсли фронтэндер не позаботится об изображениях, о них никто не позаботится.\n\n* использовать JPG когда на изображении нет текста или прозрачности, плюс он дешевле в весе;\n* использовать PNG когда есть текст или прозрачность, придется пожертвовать весом;\n* использовать SVG для иконок;\n* использовать тег `<picture>` и атрибуты `srcset` уже можно;\n* оптимизировать через ImageMagick;\n* им же и нарезать по высоте, взяв степень двойки за основу;\n* хранить изображения в облачных сервисах;\n* использовать CDN чтобы пользователь получал изображение с ближайшего сервера.\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C",
        "4ipvf7K5px",
        "79Mt7wYOrs",
        "7KIkWf2nMt"
      ],
      "isPublic": true,
      "id": "ypIwD9OkNU",
      "stageId": "u8xwpb0kWl"
    }
  ]
}