{"stage":3,"title":"ЦСС Гриды — новый стандарт работы с сетками","subTitle":"Продолжаем изучать обновления ЦСС: на очереди сетки","markdown":"Флексбоксы [закрепились](https://www.w3.org/TR/2016/CR-css-flexbox-1-20160301/) в марте 2016 года: вышли из Working Draft в Candidate Recommendation, перед этим пройдя долгий путь — браузеры по-своему реализовывали Флекбоксы, поэтому за это время накопилось куча хаков, посмотрите как отрабатывает [Автопрефиксер](https://autoprefixer.github.io/), добавляя [вендорные префиксы](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix):\n\n```css\n.example {\n  display: -webkit-box; /* для старых Хромов и Сафари */\n  display: -ms-flexbox; /* для IE */\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n```\n\nНо Флекбоксы не идеальны: они работают только в одном направлении. В помощь (а не на замену!) пришли [Гриды](https://css-tricks.com/snippets/css/complete-guide-grid/), которые работают с колонками и строками одновременно.\n\n![](https://i.imgur.com/tfwAdJx.png)\n\nПоддержка браузерами, кстати, [неплохая](https://caniuse.com/#feat=css-grid): 87.4%.\n\nИ если вы думали, что сложно запомнить [все свойства](https://cssreference.io/flexbox/) Флексбоксов, то с Гридами будет [ещё сложнее](https://cssreference.io/css-grid/), поэтому рассматривать будем на примерах.\n\n## Как нарисовать сетку?\n\nСетка рисуется через `display: grid` и свойства `grid-template-columns` с `grid-template-rows`, где указывается размер каждой колонки (column) или строки (row).\n\n```css\n.parent {\n  display: grid;\n  grid-template-columns: 20% 20% 20% 20% 20%; /* 5 колонок по 20% ширины */\n  grid-template-rows: 20% 20% 20% 20% 20%; /* 5 колонок по 20% высоты */\n}\n```\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/36/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nМожно ли это упростить? Да, если указывать не `20% 20% 20% 20% 20%`, а взять функцию `repeat(5, 20%)`.\n\nА можно ещё проще? Да, можно взять [grid-template](https://cssreference.io/property/grid-template/), где через слэш можно указать `grid-template-rows / grid-template-columns`.\n\n```css\n#grid {\n  display: grid;\n\n  grid-template-rows: 10% 10% 10%;\n  grid-template-rows: repeat(3, 10%);\n\n  grid-template-columns: 33% 33% 33% 33%;\n  grid-template-columns: repeat(4, 33%);\n\n  grid-template: repeat(3, 10%) / repeat(4, 33%);\n}\n```\n\nМожно ли указывать пиксели или [ремы/емы](https://css-tricks.com/rem-global-em-local/)? Конечно.\n\nПодытожим.\n\n#### `display: grid`\n\nВо-первых, `display: grid` для родителя сетки.\n\n#### `grid-template-rows` и `grid-template-columns`\n\nВо-вторых, `grid-template-*` для размеров сетки. Через пробел указывается размер колонки (ширина) или строки (высота). Упростить можно через `repeat(number, size)` если размеры повторяются.\n\n#### `grid-template`\n\nВ-третьих, сокращение `grid-template-rows` и `grid-template-columns` до `grid-template: <grid-template-rows> / <grid-template-column>`.\n\n---\n\nОкей, мы получили **холст**, с которым можно работать. Как же его заполнять?\n\n## Дети сетки, заполняющие её\n\nДля этого нужно завести детей, которые через `grid-column` и `grid-row` укажут их место.\n\nДопустим, нам нужен ребёнок, который встанет на четвёртую ячейку в третьей строке.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/41/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nМожет ли элемент занимать несколько ячеек или колонок? Может, если через слэш указать **начало** и **конец** ячеек.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/43/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nЧто делать, если неудобно указывать начало и конец? Начало должно быть обязательно, но конец можно не указывать, если взять `span` (в переводе \"диапазон\").\n\n```css\n#child {\n  grid-row: 2 / span 2; /* займёт 2 строки */\n  grid-column: 2 / span 4; /* займёт 4 колонки */\n}\n```\n\nКак и в случае с `grid-template`, есть сокращение `grid-area: <grid-row-start> / <grid-column-start> / <grid-row-end> / <grid-column-end>`.\n\nПодытожим.\n\n#### `grid-row` и `grid-column` для указания места\n\nЕсли указать числом позицию элемента, то он встанет именно туда.\n\n```css\n#child {\n  grid-column: 2; /* второй столбец */\n  grid-row: 3; /* третья строка */\n}\n```\n\n#### `grid-row` и `grid-column` с диапазоном\n\nЧерез слэш у `grid-row` и `grid-column` можно указать **начало** и **конец** элемента в сетке.\n\n```css\n#child {\n  grid-row: 3 / 6; /* с третьей до шестой (не включая!) строки */\n  grid-column: 2 / 4; /* со второго до четвёртого столбца */\n}\n```\n\nКстати, если вы хотите большей ясности, то `grid-column` и `grid-row` это сокращения для `grid-*-start` и `grid-*-end`.\n\n```css\n#child {\n  grid-row-start: 3;\n  grid-row-end: 6;\n\n  grid-column-start: 2;\n  grid-column-end: 4;\n}\n```\n\n#### `span`\n\nВместо номера ячейки или строки можно указать размер, добавив слово `span`.\n\n```css\n#child {\n  grid-row-start: 3;\n  grid-row-end: span 2;\n\n  grid-column-start: 2;\n  grid-column-end: span 1;\n}\n```\n\n#### `grid-area` как сокращение\n\nНу и, наконец, есть сокращение `grid-area: <grid-row-start> / <grid-column-start> / <grid-row-end> / <grid-column-end>` для перечисленных свойств.\n\n```css\n#child {\n  grid-area: 3 / span 2 / 2 / span 1;\n}\n```\n\nУдобно ли это? Не скажу что очень. Я бы рекомендовал использовать `grid-row` и `grid-column` — баланс между краткостью и очевидностью.\n\n## Разные кейсы\n\nМожно ли не указывать `grid-row` и `grid-column`? Да, можно просто расставить элементы внутри и они автоматически выстроятся по порядку.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/44/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если элементов будет больше, чем ячеек? Они выпадут за пределы сетки и строки на них не будут действовать (а колонки — будут).\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/45/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если будет элемент с `grid-row` или `grid-column` или `grid-area`? Он сдвинет обычные элементы.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/35/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если не указывать `grid-template-row`? Элементы будут автоматически выстраиваться.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/49/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если не указывать `grid-template-column`?\n\nЭлементы будут выстраиваться по границам элементов, у которых выставлен максимальный `grid-column`.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/56/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если намиксовать значения? Да ничего, выстроится всё по ним.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/66/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n## Итог\n\nЦСС Гриды — мощный инструмент, но синтаксис у них не самый очевидный.\n\nНужно запомнить, что в большинстве случаев достаточно `display: grid` и `grid-template-*` — элементы внутри выстроятся сами.\n\nЕсли нужно какому-то блоку указать место или размеры, то в дело идут `grid-row` и `grid-column`.\n\n---\n\nДля закрепления навыков советую пройти игру [Grid Garden](https://cssgridgarden.com/) от создателей [Flexbox Froggy](http://flexboxfroggy.com/).\n\n---\n\nВ реальной жизни Гриды ещё не так часто используются, но вдохновения можно поискать на [Кодпене](https://codepen.io/tag/css-grid/), например, в этой демке Марвеловского постера, там ещё используется мощное свойство [`clip-path`](https://css-tricks.com/almanac/properties/c/clip/).\n\n<iframe height='321' scrolling='no' title='MARVEL POSTER [CSS GRID]' src='//codepen.io/wiltrouble/embed/eMPgJb/?height=321&theme-id=light&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/wiltrouble/pen/eMPgJb/'>MARVEL POSTER [CSS GRID]</a> by wiltrouble (<a href='https://codepen.io/wiltrouble'>@wiltrouble</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n---\n\nКстати, ещё Страйп [рассказывал](https://stripe.com/blog/connect-front-end-experience) о том, как они делали бэкграунд через ЦСС Гриды и [`transform`](https://cssreference.io/property/transform/).\n\n![](https://stripe.com/img/blog/posts/connect-frontend/header-background-grid-tilted.png)\n","previous":["Z85TwJEQNd","nHdviS9Jil","kK6TqBobfl","Wfn3j53w5G","vUP7iRK2my","mGpNZTKciZ","DNmsGGToly","iZzoQdvKTy","dXE2elcH7C","4ipvf7K5px","79Mt7wYOrs","7KIkWf2nMt","ypIwD9OkNU","KEZTmbshEY"],"id":"BxVTHC2RI5","stageId":"WxcdGfFHO1"}