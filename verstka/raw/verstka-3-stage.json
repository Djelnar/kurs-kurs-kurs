{
  "stageName": "Этап третий: продвинутый",
  "lessons": [
    {
      "stage": 3,
      "title": "Как развивается ЦСС и смерть препроцессоров с рождением ПостЦСС",
      "subTitle": "ЦСС не стоит на месте — а как нам писать будущий ЦСС уже сегодня?",
      "markdown": "ЦСС развивается — когда-то мы получили стандарт ЦСС3, а теперь W3C (помните? консорциум, который развивает веб) решил перейти на релизы [конкретных спецификаций](https://www.w3.org/Style/CSS/current-work) разными рабочими группами, поэтому теперь у нас есть не ЦСС4, не ЦСС5, не ЦСС 3.2.1.1.3.211.522, а конкретные фичи и их реализации в браузере.\n\nНапример, во [многих браузерах](https://caniuse.com/#search=css%20variables) уже есть [**Custom Properties**](https://www.w3.org/TR/css-variables/) — это переменные в ЦССе.\n\n```css\n:root {\n  --mainColor: red;\n}\n\na {\n  color: var(--mainColor);\n}\n```\n\nИли [**Custom Media Queries**](https://drafts.csswg.org/mediaqueries-5/#custom-mq):\n\n```css\n@custom-media --md-viewport (min-width: 796px);\n\n@media (--md-viewport) {\n  /* styles for small viewport */\n}\n```\n\nА также [`image-set()`](https://drafts.csswg.org/css-images-3/#image-set-notation) для нескольких изображений:\n\n```css\n.foo {\n  background-image: image-set(\n    url(img/bg.png) 1x,\n    url(img/bg-2x.png) 2x,\n    url(bg-print.png) 600dpi\n  );\n}\n```\n\nПсевдокласс [`:matches()`](http://dev.w3.org/csswg/selectors-4/#matches):\n\n```css\n.description:matches(:first-child, .special) {\n  color: red;\n}\n```\n\nИ много других. Но как это всё использовать в проекте? Для этого существует [cssnext](http://cssnext.io/) — пакет плагинов для ПостЦСС.\n\n## [ПостЦСС](http://postcss.org/)\n\n… ПостЦСС? Чего?\n\nПостЦСС это утилита, которая трансформирует ваш ЦСС с помощью джс-плагинов.\n\nЧисто технически, ПостЦСС это парсер ЦСС — он разбирает ваш ЦСС на понятный себе формат, с которым уже потом работают плагины. Например, есть плагин [Autoprefixer](https://github.com/postcss/autoprefixer): он на выходе выдаёт код с браузерными префиксами:\n\n```css\n/* input */\na {\n  display: flex;\n}\n\n/* output */\na {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n```\n\nИли тот же cssnext:\n\n```css\n/* input */\n:root {\n  --red: #d33;\n}\na {\n  &:hover {\n    color: color(var(--red) a(54%));\n  }\n}\n\n/* output */\na:hover {\n  color: #dd3333;\n  color: rgba(221, 51, 51, 0.54);\n}\n```\n\nУдобно? Чертовски.\n\nКстати, у фронтэндеров есть [ESLint](https://eslint.org) — штука, которая следит за качеством кода, а у верстальщиков — [stylelint](https://stylelint.io/). Конечно, есть [плагин](https://github.com/shinnn/vscode-stylelint) для ВСКода — поставите и будете в редакторе видеть, в чём у вас говнокод.\n\n### Настроим ПостЦСС с `cssnext`\n\nПомните, в первом уроке я говорил, что большинство приложений и утилит для разработчиков идут только с командным интерфейсом и работать с ними можно только в консоли? Вот теперь пора вернуться к Терминалу.\n\n#### Нода и пакетные менеджеры `npm` и `yarn`\n\nДля начала нам нужно поставить Ноду (Node.js) — она выполняет джс-файлы не в браузере.\n\n##### Windows\n\nСкачайте с сайта [nodejs.org](https://nodejs.org/en/).\n\n##### Unix\n\nПоставьте из своих репозиториев: `apt-get`, `yum` и так далее.\n\n##### macOS\n\nВ Маке нет встроенного пакетного менеджера (а зря!), поэтому сначала нужно поставить [Homebrew](http://brew.sh/).\n\nПоставьте Ноду через команду `brew install node`.\n\n---\n\nВместе с Нодой идёт пакетный менеджер [`npm`](https://www.npmjs.com/) — node package manager.\n\nПакетный менеджер делится на две вещи: база пакетов и клиент, который работает с ней. Команда `npm` и есть этот самый клиент.\n\nПроблема в том, что нпм работал плохо и медленно, поэтому ребята из Фейсбука сделали свой пакетный менеджер [Ярн](http://yarnpkg.com/): он работает быстрее и предсказуемее.\n\nЧто такое вообще пакетный менеджер и почему предсказуемость и скорость так важны?\n\n* **Во-первых**, во время разработки вы будете использовать много сторонних модулей — ведь кучу вещей кто-то за вас уже когда-то написал, осталось это только подключить и использовать.\n\n* **Во-вторых**, говоря про скорость: у каждого пакета могут быть свои зависимости (по 2-3), а в проекте, например, 100 зависимостей. Вместо 100 у вас устанавливается 300: 100 основных пакетов и их зависимостей. Может быть долго!\n\n* **В-третьих**, пакеты соблюдают [Семвер](http://semver.org/) — семантичное версионирование. Дело в том, что пакеты обновляются, а ломать работающие приложения из-за этого не хочется, поэтому у нас есть версионирование `MAJOR.MINOR.PATCH` (например, Реакт сейчас — 16.0.0). `npm` раньше не уважал прописанные в `package.json` версии и порою всё ломалось. В Ярне такого нет изначально.\n\nПакеты проекта в джс-мире описываются в файле [`package.json`](https://docs.npmjs.com/files/package.json) в секциях `dependencies` и `devDependencies`.\n\n#### dependencies\n\nВсе зависимости, которые **используются в приложении**: Реакт, [normalize.css](https://necolas.github.io/normalize.css/), готовая адаптивная сетка [flexboxgrid2](https://github.com/evgenyrodionov/flexboxgrid2).\n\n#### devDependencies\n\nЗависимости, которые **помогают работать приложению**: Стайллинт или тот же ПостЦСС.\n\nКак поставить Ярн? [Описано в документации](https://yarnpkg.com/en/docs/install).\n\nКак использовать пакетный менеджер? Как и `brew` из Макоси! `yarn add [название пакета]`, например, `yarn add react` установит Реакт последней версии и сохранит его в `package.json`.\n\nКоманда `yarn` (сокращенно от `yarn install`) установит все зависимости, которые указаны в `package.json`.\n\n---\n\nОкей, Ноду поставили, с пакетным менеджером разобрались, теперь нужно поставить ПостЦСС и настроить его на работу с цсснекст.\n\nСначала нужно выполнить команду `yarn init`: она создаст файл `package.json`, в котором будут указаны настройки проекта.\n\nПосле — читаем [установку цсснекст](http://cssnext.io/setup/): нам нужно поставить две зависимости postcss и postcss-cssnext через команду\n\n```sh\nnpm install postcss postcss-cssnext\n```\n\nНпм нас, конечно, мало интересует, поэтому мы будем сразу ставить через Ярн и в `devDeps`:\n\n```sh\nyarn add --dev postcss postcss-cssnext\n```\n\nЯрн установит и сохранит в `package.json`:\n\n```json\n{\n  ...\n  \"devDependencies\": {\n    \"postcss\": \"6.0.15\",\n    \"postcss-cssnext\": \"3.0.2\"\n  }\n  ...\n}\n```\n\nОкей! В документации сказано, что можно использовать разными способами, но нас интересует CLI (command line interface): мы будем запускать в Терминале.\n\n![](https://i.imgur.com/dcuoIG2.png)\n\nДля этого нам нужно поставить [postcss-cli](https://www.npmjs.com/package/postcss-cli) (да, ссылка на нпм, хоть и будем ставить через Ярн — потому что Ярн использует базу нпма).\n\n```sh\nyarn add --dev postcss-cli\n```\n\nЗатем создаём файл `postcss.config.js` (ваш первый опыт с джсом!) и пишем там:\n\n```\nmodule.exports = {\n  plugins: [\n    require('postcss-cssnext')()\n  ]\n}\n```\n\nПро `module.exports` и `require()` мы поговорим позже.\n\nОкей, теперь нужно проверить, что всё работает. У нас будут файлы `styles/style.css` и `build/styles/style.css` — во втором будет наш ЦСС, _скомпилированный_ через ПостЦСС и цсснекст.\n\n```\npostcss [input.css] [OPTIONS] [-o|--output output.css] [-w|--watch]\n```\n\nНаша команда будет выглядеть так:\n\n```\nyarn postcss styles/style.css --output build/styles/style.css --watch\n```\n\nЧто за `--watch`? `postcss-cli` будет перезапускаться на каждое изменение файлов. Без `--watch` будет один раз компилироваться.\n\n## Итог\n\nМы узнали про будущий ЦСС и как его заставить работать уже сегодня: через ПостЦСС и цсснекст.\n\n## Задание\n\nПрочитайте [фичи цсснекст](http://cssnext.io/features/) и переводите свои стили на будущий ЦСС.\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C",
        "4ipvf7K5px",
        "79Mt7wYOrs",
        "7KIkWf2nMt",
        "ypIwD9OkNU"
      ],
      "isPublic": true,
      "id": "KEZTmbshEY",
      "stageId": "WxcdGfFHO1"
    },
    {
      "stage": 3,
      "title": "ЦСС Гриды — новый стандарт работы с сетками",
      "subTitle": "Продолжаем изучать обновления ЦСС: на очереди сетки",
      "markdown": "Флексбоксы [закрепились](https://www.w3.org/TR/2016/CR-css-flexbox-1-20160301/) в марте 2016 года: вышли из Working Draft в Candidate Recommendation, перед этим пройдя долгий путь — браузеры по-своему реализовывали Флекбоксы, поэтому за это время накопилось куча хаков, посмотрите как отрабатывает [Автопрефиксер](https://autoprefixer.github.io/), добавляя [вендорные префиксы](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix):\n\n```css\n.example {\n  display: -webkit-box; /* для старых Хромов и Сафари */\n  display: -ms-flexbox; /* для IE */\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n```\n\nНо Флекбоксы не идеальны: они работают только в одном направлении. В помощь (а не на замену!) пришли [Гриды](https://css-tricks.com/snippets/css/complete-guide-grid/), которые работают с колонками и строками одновременно.\n\n![](https://i.imgur.com/tfwAdJx.png)\n\nПоддержка браузерами, кстати, [неплохая](https://caniuse.com/#feat=css-grid): 87.4%.\n\nИ если вы думали, что сложно запомнить [все свойства](https://cssreference.io/flexbox/) Флексбоксов, то с Гридами будет [ещё сложнее](https://cssreference.io/css-grid/), поэтому рассматривать будем на примерах.\n\n## Как нарисовать сетку?\n\nСетка рисуется через `display: grid` и свойства `grid-template-columns` с `grid-template-rows`, где указывается размер каждой колонки (column) или строки (row).\n\n```css\n.parent {\n  display: grid;\n  grid-template-columns: 20% 20% 20% 20% 20%; /* 5 колонок по 20% ширины */\n  grid-template-rows: 20% 20% 20% 20% 20%; /* 5 колонок по 20% высоты */\n}\n```\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/36/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nМожно ли это упростить? Да, если указывать не `20% 20% 20% 20% 20%`, а взять функцию `repeat(5, 20%)`.\n\nА можно ещё проще? Да, можно взять [grid-template](https://cssreference.io/property/grid-template/), где через слэш можно указать `grid-template-rows / grid-template-columns`.\n\n```css\n#grid {\n  display: grid;\n\n  grid-template-rows: 10% 10% 10%;\n  grid-template-rows: repeat(3, 10%);\n\n  grid-template-columns: 33% 33% 33% 33%;\n  grid-template-columns: repeat(4, 33%);\n\n  grid-template: repeat(3, 10%) / repeat(4, 33%);\n}\n```\n\nМожно ли указывать пиксели или [ремы/емы](https://css-tricks.com/rem-global-em-local/)? Конечно.\n\nПодытожим.\n\n#### `display: grid`\n\nВо-первых, `display: grid` для родителя сетки.\n\n#### `grid-template-rows` и `grid-template-columns`\n\nВо-вторых, `grid-template-*` для размеров сетки. Через пробел указывается размер колонки (ширина) или строки (высота). Упростить можно через `repeat(number, size)` если размеры повторяются.\n\n#### `grid-template`\n\nВ-третьих, сокращение `grid-template-rows` и `grid-template-columns` до `grid-template: <grid-template-rows> / <grid-template-column>`.\n\n---\n\nОкей, мы получили **холст**, с которым можно работать. Как же его заполнять?\n\n## Дети сетки, заполняющие её\n\nДля этого нужно завести детей, которые через `grid-column` и `grid-row` укажут их место.\n\nДопустим, нам нужен ребёнок, который встанет на четвёртую ячейку в третьей строке.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/41/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nМожет ли элемент занимать несколько ячеек или колонок? Может, если через слэш указать **начало** и **конец** ячеек.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/43/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nЧто делать, если неудобно указывать начало и конец? Начало должно быть обязательно, но конец можно не указывать, если взять `span` (в переводе \"диапазон\").\n\n```css\n#child {\n  grid-row: 2 / span 2; /* займёт 2 строки */\n  grid-column: 2 / span 4; /* займёт 4 колонки */\n}\n```\n\nКак и в случае с `grid-template`, есть сокращение `grid-area: <grid-row-start> / <grid-column-start> / <grid-row-end> / <grid-column-end>`.\n\nПодытожим.\n\n#### `grid-row` и `grid-column` для указания места\n\nЕсли указать числом позицию элемента, то он встанет именно туда.\n\n```css\n#child {\n  grid-column: 2; /* второй столбец */\n  grid-row: 3; /* третья строка */\n}\n```\n\n#### `grid-row` и `grid-column` с диапазоном\n\nЧерез слэш у `grid-row` и `grid-column` можно указать **начало** и **конец** элемента в сетке.\n\n```css\n#child {\n  grid-row: 3 / 6; /* с третьей до шестой (не включая!) строки */\n  grid-column: 2 / 4; /* со второго до четвёртого столбца */\n}\n```\n\nКстати, если вы хотите большей ясности, то `grid-column` и `grid-row` это сокращения для `grid-*-start` и `grid-*-end`.\n\n```css\n#child {\n  grid-row-start: 3;\n  grid-row-end: 6;\n\n  grid-column-start: 2;\n  grid-column-end: 4;\n}\n```\n\n#### `span`\n\nВместо номера ячейки или строки можно указать размер, добавив слово `span`.\n\n```css\n#child {\n  grid-row-start: 3;\n  grid-row-end: span 2;\n\n  grid-column-start: 2;\n  grid-column-end: span 1;\n}\n```\n\n#### `grid-area` как сокращение\n\nНу и, наконец, есть сокращение `grid-area: <grid-row-start> / <grid-column-start> / <grid-row-end> / <grid-column-end>` для перечисленных свойств.\n\n```css\n#child {\n  grid-area: 3 / span 2 / 2 / span 1;\n}\n```\n\nУдобно ли это? Не скажу что очень. Я бы рекомендовал использовать `grid-row` и `grid-column` — баланс между краткостью и очевидностью.\n\n## Разные кейсы\n\nМожно ли не указывать `grid-row` и `grid-column`? Да, можно просто расставить элементы внутри и они автоматически выстроятся по порядку.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/44/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если элементов будет больше, чем ячеек? Они выпадут за пределы сетки и строки на них не будут действовать (а колонки — будут).\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/45/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если будет элемент с `grid-row` или `grid-column` или `grid-area`? Он сдвинет обычные элементы.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/35/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если не указывать `grid-template-row`? Элементы будут автоматически выстраиваться.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/49/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если не указывать `grid-template-column`?\n\nЭлементы будут выстраиваться по границам элементов, у которых выставлен максимальный `grid-column`.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/56/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЧто будет, если намиксовать значения? Да ничего, выстроится всё по ним.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/rp06zgLq/66/embedded/result,html,css/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n## Итог\n\nЦСС Гриды — мощный инструмент, но синтаксис у них не самый очевидный.\n\nНужно запомнить, что в большинстве случаев достаточно `display: grid` и `grid-template-*` — элементы внутри выстроятся сами.\n\nЕсли нужно какому-то блоку указать место или размеры, то в дело идут `grid-row` и `grid-column`.\n\n---\n\nДля закрепления навыков советую пройти игру [Grid Garden](https://cssgridgarden.com/) от создателей [Flexbox Froggy](http://flexboxfroggy.com/).\n\n---\n\nВ реальной жизни Гриды ещё не так часто используются, но вдохновения можно поискать на [Кодпене](https://codepen.io/tag/css-grid/), например, в этой демке Марвеловского постера, там ещё используется мощное свойство [`clip-path`](https://css-tricks.com/almanac/properties/c/clip/).\n\n<iframe height='321' scrolling='no' title='MARVEL POSTER [CSS GRID]' src='//codepen.io/wiltrouble/embed/eMPgJb/?height=321&theme-id=light&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/wiltrouble/pen/eMPgJb/'>MARVEL POSTER [CSS GRID]</a> by wiltrouble (<a href='https://codepen.io/wiltrouble'>@wiltrouble</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n---\n\nКстати, ещё Страйп [рассказывал](https://stripe.com/blog/connect-front-end-experience) о том, как они делали бэкграунд через ЦСС Гриды и [`transform`](https://cssreference.io/property/transform/).\n\n![](https://stripe.com/img/blog/posts/connect-frontend/header-background-grid-tilted.png)\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C",
        "4ipvf7K5px",
        "79Mt7wYOrs",
        "7KIkWf2nMt",
        "ypIwD9OkNU",
        "KEZTmbshEY"
      ],
      "isPublic": true,
      "id": "BxVTHC2RI5",
      "stageId": "WxcdGfFHO1"
    },
    {
      "stage": 3,
      "title": "Автоматизация работы через НПМ и Галп",
      "subTitle": "Технологии нужны для автоматизации процессов, поэтому в этом уроке мы учимся работе со скриптам в Нпме и Галпу",
      "markdown": "> Если вы не знаете Джаваскрипт, то в [курсе по Реакту](https://erodionov.ru/courses/react) пройдите третий урок, «Джаваскрипт для начинающих». Он открытый. Да и остальные тоже полезными будут!\n\nС Нпмом вы уже знакомы по четырнадцатому уроку с Постцсс и знаете про работу с **пакетами**.\n\nПакеты бывают двух типов: **исполняемые** (или бинарники) и **подключаемые**. Нас интересуют первые — вторые понадобятся в [курсе по Реакту](https://erodionov.ru/courses/react).\n\n## Исполняемые пакеты в Нпме\n\nВ Нпме полно пакетов, которые можно запустить в Терминале. Ключевое отличие от Хоумбрю или другого системного пакетного менеджера в том, что почти всегда пакеты в Нпме написаны на Джаваскрипте, а поэтому благодаря Ноде запускаются на любой системе без особых правок.\n\nОбычно эти пакеты имеют постфикс [`-cli`](https://www.npmjs.com/search?q=keywords:cli) (command line interface).\n\n_Кстати, вы же не забыли, что говоря Нпм, мы подразумеваем базу Нпма, с которой мы будем работать через Ярн?_\n\nПримеры?\n\n* [postcss-cli](http://npm.im/postcss-cli) — уже знакомый ПостЦСС,\n* [html-minifier](http://npm.im/html-minifier) — минификатор ХТМЛ,\n* [uglify-js](https://www.npmjs.com/package/uglify-js) — минификатор и оптимизатор Джса,\n* [pa11y](https://www.npmjs.com/package/pa11y) — тестировщик a11y,\n* [stylelint](https://www.npmjs.org/package/stylelint) — линтер стилей,\n* и даже [git-open](https://www.npmjs.com/package/git-open) — команда для открытия Гитхаба или других сервисов из консоли.\n\n_Линтер, кстати, это анализатор кода на предмет проблем_\n\nОкей, эти пакеты мы и так умеем запускать через `yarn postcss ...` или `yarn pa11y ...`, а причём тут Нпм?\n\nВ нпмовском `package.json` есть поле [`scripts`](https://docs.npmjs.com/misc/scripts): это Джаваскриптовский объект, где можно написать скрипты, которые вы потом будете запускать через `yarn run ...`.\n\nПример:\n\n```json\n{\n  \"name\": \"erodionov.ru\",\n  \"scripts\": {\n    \"minify:html\": \"html-minifier --input-dir src --output-dir dist\",\n    \"minify:css\": \"csso --input src/styles.css --output dist/styles.css\",\n    \"minify\": \"yarn run minify:html && yarn run minify:css\",\n    \"lint\": \"stylelint src\"\n  }\n}\n```\n\nЗачем это вообще нужно?\n\n**Во-первых**, команды можно комбинировать через `&&` — вместо 10 команд вы можете запускать одну. На самом деле, оператор `&&` — системный, поэтому это не особо аргумент.\n\n**Во-вторых**, эти скрипты работают как альясы: вместо того, чтобы писать огромные команды с кучей флагов, вы всё сводите к `yarn run X`. Вот это действительно удобно!\n\n---\n\nНо что делать, если команд становится **очень** много? Штук 50 не очень хочется поддерживать, верно? Для этого существует [Галп](https://gulpjs.com/).\n\n## Галп\n\nГалп это утилита, которая автоматизирует **воркфлоу** (рабочий процесс) через **таски** (задачи).\n\nЧасто звучит мысль о том, что Галп не нужен — во фронтэнде это правда, почти во всех задачах его заменил [Вебпак](https://webpack.js.org/) (мы рассматриваем его в [курсе по Реакту](https://erodionov.ru/courses/react)), а с остальным справляются Нпм-скрипты. Тем не менее, в вёрстке нет Вебпака, поэтому тут спокойно используют Галп.\n\nТаски (`task`) в Галпе очень простые: на вход (`in`) подаётся исходник (`src`), мы его преобразовываем (`pipe`), на выходе (`out`) мы получаем результат (`dest`).\n\nГалп, кстати, работает на своих плагинах, поэтому вам нужны специальные версии: модуль `csso` не подойдёт, нужен `gulp-csso`). То же самое с Постцссом: нужен [`gulp-postcss`](https://github.com/postcss/gulp-postcss). Гуглите `gulp [нужный модуль]`.\n\nСмотрите, вот как это выглядит в коде:\n\n```js\n// gulpfile.js\n\nconst gulp = require(\"gulp\"); // подключаем Галп как модуль\nconst minifycss = require(\"gulp-csso\");\nconst postcss = require(\"gulp-postcss\");\n\n// плагины для ПостЦСС\nconst autoprefixer = require(\"autoprefixer\");\nconst cssnext = require(\"cssnext\");\n\n// объявляем таск с названием \"styles\"\n// первым аргументом — название таска,\n// вторым — функция, которая возвращает (`return`),\n// обработанным\ngulp.task(\"styles\", function() {\n  return gulp\n    .src(\"src/styles/*.css\") // через .src() передаём путь до исходника\n    .pipe(postcss([cssnext(), autoprefixer()])) //  через .pipe() вызываем плагин как функцию\n    .pipe(minifycss()) // и ещё раз\n    .pipe(gulp.dest(\"build/styles\")); // в финальном пайпе через gulp.dest() указываем куда сложить результат\n});\n```\n\nВ документации Галпа есть крутые [рецепты](https://github.com/gulpjs/gulp/tree/v3.9.1/docs/recipes), описание [АПИ](https://github.com/gulpjs/gulp/blob/v3.9.1/docs/API.md), и [плагины](https://gulpjs.com/plugins/). А я попробую ответить на возникшие вопросы.\n\n#### Как запускать-то?\n\nВо-первых, `gulp-cli` должен быть установлен в проекте.\n\nВо-вторых, как и любой исполняемый пакет — `yarn gulp [название таска]`.\n\n#### Как объединить таски?\n\nВторым аргументом функции `.task()` передайте массив других тасков, а не функцию. Пример есть на [главной странице](https://gulpjs.com/) Галпа.\n\n```js\ngulp.task(\"build\", [\"styles\", \"scripts\", \"images\"]);\n```\n\nВажно: все таски будут запускать параллельно, а не последовательно.\n\n#### Тогда как запустить последовательно?\n\nОтвет в документации: [Running tasks in series, i.e. Task Dependency](https://github.com/gulpjs/gulp/blob/v3.9.1/docs/recipes/running-tasks-in-series.md)\n\n#### Устал постоянно запускать Галп\n\nМожно воспользоваться [`gulp.watch`](https://github.com/gulpjs/gulp/blob/v3.9.1/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb) по аналогии с `gulp.task()`: первым аргументом название (например, `'watch-js'`), вторым — массив из тасков.\n\nГалп будет держать процесс открытым и запускать таски, если что-то изменилось в исходниках.\n\n#### Он постоянно собирает всё заново и поэтому работает медленно\n\nЭто можно исправить инкрементальным обновлением (incremental update) через [`gulp-watch`](https://github.com/floatdrop/gulp-watch), рецепт есть, опять же, в документации: [Rebuild only files that change](https://github.com/gulpjs/gulp/blob/v3.9.1/docs/recipes/rebuild-only-files-that-change.md).\n\n## Задание\n\nДля начала вам нужно разделить проект на две директории: `src` и `build`. В первой будут исходники, во второй — обработанные файлы.\n\nНе забудьте, что `build` не должна быть в репозитории — воспользуйтесь `.gitignore`.\n\nВот задания:\n\n* перенесите работу с ПостЦСС в Галп,\n* подключите какой-нибудь оптимизатор картинок,\n* подключите минифайеры ХТМЛ и ЦСС,\n* подключите [Стайлинт](https://stylelint.io/) (конфигом возьмите [stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard)) — вы должны знать об ошибках,\n* объедините это под таском `build`,\n* а для собственного удобства заведите таск `watch`.\n\nЧтобы было проще работать с Джаваскриптом, поставьте в редактор [Преттир](https://prettier.io/) — это форматтер кода — и [Еслинт](http://eslint.org/) (с конфигом [eslint-config-recommended](http://npm.im/eslint-config-recommended)) — это валидатор кода, он будет подсвечивать ошибки чтобы вы их исправляли ещё до запуска Галпа Нодой.\n\n## Итог\n\nВ этом уроке мы разобрались с автоматизацией процессов через Нпм-скрипты и Галп.\n\nВопреки слухам, Галп живее всех живых и всё ещё помогает верстальщикам спасаться от боли ручной работы.\n\nКстати, есть ещё один популярный таск раннер — [Грант](https://gruntjs.com/). Галп настраивается кодом на Джаваскрипте, а [Гранта](https://gruntjs.com/sample-gruntfile) программируется конфигами. Плюс работает медленнее (потому что Галп работает с памятью, а Грант с файлами), ну и заброшен сообществом давным-давно.\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C",
        "4ipvf7K5px",
        "79Mt7wYOrs",
        "7KIkWf2nMt",
        "ypIwD9OkNU",
        "KEZTmbshEY",
        "BxVTHC2RI5"
      ],
      "isPublic": true,
      "id": "Qf6hOneMdp",
      "stageId": "WxcdGfFHO1"
    },
    {
      "stage": 3,
      "title": "Шаблонизаторы",
      "subTitle": "Продолжаем облегчать себе ежедневную жизнь через одномоментную боль",
      "markdown": "В описании урока я написал про одномоментную боль — и это, к сожалению, фраза почти про любой инструмент разработчика: все эти шутки про настройки Вебпака не совсем лживы.\n\nТем не менее, не нужно расстраиваться! Нужно просто знать об этом и внимательно читать документации, гуглить и спрашивать в тематических чатах.\n\nИ помните про ошибки: они нужны, чтобы помочь вам, а не чтобы выбесить из себя. Если возникла ошибка — читайте её, гуглите и спрашивайте в чатах.\n\nОкей, погнали! Сегодня будем прикручивать шаблонизатор.\n\n## Шаблоны и компоненты\n\nШаблон это интерфейс, который можно переиспользовать с разными данными.\n\nНапример, карточка ресторана, это один **компонент**, просто с разными данными: изображением, названием, категориями, средней ценой и временем доставки.\n\n![](https://i.imgur.com/v2lJHlY.png)\n\nБыло бы здорово, если бы у нас был отдельный компонент (или шаблон), который мы могли бы использовать несколько раз. Что-то типа\n\n```css\n<template name=\"card\">\n  <img src={imgSrc} />\n  <h3>{title}</h3>\n  <p>{priceCategory} • {category}</p>\n  <time>{deliveryTimeFrom} - {deliveryTimeTo} min</time>\n</template>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n      <card\n        imgSrc=\"https://i.imgur.com/v2lJHlY.png\"\n        title=\"Кофемания на Трубной\"\n        priceCategory=\"₽\"\n        category=\"Европейская\"\n        deliveryTimeFrom=\"30\"\n        deliveryTimeTo=\"50\"\n      >\n    </div>\n  </div>\n</div>\n```\n\nСогласитесь, выглядит красиво? Поздравляю, мы написали шаблон (в теге `template`) и его использовали. Конечно, это не заработает — это псевдокод.\n\n> Я бы даже сказал, что это близко к компонентам Реакта (седьмой урок [курса по Реакту](https://erodionov.ru/courses/react/9wO7ihaBIk), но первые шесть нужно сначала пройти) — там тоже используются ХТМЛ-атрибуты для компонентов.\n\nОкей, а как сделать так, чтобы заработало?\n\n## Шаблонизаторы\n\nШаблонизатор — это специальная утилита, которая **компилирует** шаблоны (например, из своего формата в тот же ХТМЛ). Самый популярный в вёрстке — это [Паг](https://pugjs.org) (pug).\n\nВ базовом понимании шаблонизатор во время компиляции заменяет данные в шаблоне, но некоторые дают ещё дополнительные возможности.\n\n### Другой синтаксис\n\nКому-то кажется. что ХТМЛ не очень удобен, поэтому они вводят свой синтаксис:\n\n```pug\ndoctype html  \nhtml(lang='en')  \n head\n   title Pug\n body\n   h1 Pug Examples\n   div.container\n     p Cool Pug example!\n     a(href='google.com') Google\n```\n\nВыглядит странновато, но кому-то нравится.\n\n### Импорты\n\nКак раз тот пример, с которого начался урок. Нам понадобятся [миксины](https://pugjs.org/language/mixins.html) и [импорты](https://pugjs.org/language/includes.html).\n\n### Миксины\n\n```pug\nmixin article(title)\n  .article\n    .article-wrapper\n      h1= title // через = работаем с аргументами\n      if block // если есть ребёнок (он называется блоком) — отобразить\n        block\n      else // если нет, то отобразить заглушку\n        p No content provided\n\n+article('Hello world') // вызываем через +\n+article('Hello world')\n  p This is my\n  p Amazing article\n```\n\n```html\n<div class=\"article\">\n  <div class=\"article-wrapper\">\n    <h1>Hello world</h1>\n    <p>No content provided</p>\n  </div>\n</div>\n<div class=\"article\">\n  <div class=\"article-wrapper\">\n    <h1>Hello world</h1>\n    <p>This is my</p>\n    <p>Amazing article</p>\n  </div>\n</div>\n```\n\n### Инклюды\n\nНо миксины работают если они находятся в одном файле. Как быть, если хочется держать миксин в отдельном? Например, в `Card.pug`.\n\nОфициальная документация не очень помогает, поэтому пришлось гуглить «pug include with variables» и найти [ответ](https://stackoverflow.com/a/46395928/2389634) на Стэковерфлоу.\n\nСхема проста: в одном файле мы объявляем миксин, в другом — подключаем через `include` и используем.\n\n```pug\n// Card.pug\nmixin Card(title, imgSrc, priceCategory, category, deliveryTimeFrom, deliveryTimeTo)\n  .card\n    img(src=imgSrc)\n    h3= title\n    p #{priceCategory} • #{category} // со значениями можно работать и через #{}\n    time #{deliveryTimeFrom} - #{deliveryTimeTo}\n```\n\n```pug\n// List.pug\ninclude Card.pug\n\n.list\n  +Card(\"Кофемания на Трубной\", \"https://i.imgur.com/v2lJHlY.png\", \"₽\", \"Европейская\", 30, 50)\n```\n\n### Подобие нормального программирования\n\nВо многих шаблонизаторах (кстати, ещё один популярный — [Хэндлбарс](https://handlebarsjs.com/)) есть поддержка [кейсов](https://pugjs.org/language/case.html), [циклов](https://pugjs.org/language/iteration.html) и [условий](https://pugjs.org/language/conditionals.html). Здесь документация уже справляется.\n\n## Компиляция шаблонов в ХТМЛ\n\nОкей, мы написали эти шаблоны, но браузер же не поддерживает `.pug` или `.hjs`, нам нужно их перевести в ХТМЛ. Этот процесс называется **компиляцией**.\n\nНа [главной странице](https://pugjs.org/api/getting-started.html) Пага вторым параграфом идёт описание этого процесса:\n\n> The general rendering process of Pug is simple. [`pug.compile()`](https://pugjs.org/api/reference.html#pugcompilesource-options) will compile the Pug source code into a JavaScript function that takes a data object (called “`locals`”) as an argument. Call that resultant function with your data, and _voilà!_, it will return a string of HTML rendered with your data.\n\nНам тут понадобится создать файл `compile-templates.js` и написать небольшой Джс.\n\n```pug\n// src/index.pug\n\ndoctype html\n  html\n    head\n      title UberEats\n      ...\n```\n\n```js\n// compile-templates.js\nconst pug = require(\"pug\");\n\n// скомпилируем\nconst compiled = pug.compileFile(\"src/index.pug\");\n\n// отрендерим и выведем в консоль\n// через метод `console.log()`\nconsole.log(compiled());\n// \"<!doctype html><html><head><title>UberEats</title>...</head></html>\"\n```\n\n## Задание\n\n_Это задание добровольное — не всем нужны шаблонизаторы_\n\nПереведите свою вёрстку на Паг и не забудьте воспользоваться [`gulp-pug`](https://www.npmjs.com/package/gulp-pug): держать файл `compile-pug.js` не очень удобно.\n\n## Итог\n\nСегодня мы познакомились с шаблонизаторами — утилитами, которые оптимизируют наш код, приводя его к шаблонам.\n\nМожет быть, вам не всегда будет нравиться их синтаксис, но облегчать жизнь они облегчают.\n\n### Заметка про Реакт\n\nКак вы могли заметить, здесь у нас пропаганда Реакта — что уж поделать, он стал стандартом во фронтэнде.\n\nНе в последнюю очередь благодаря своему Джсх — чисто технически, это не совсем шаблонизатор, но можно назвать и так.\n\nПока у остальных библиотек и фреймворков типа Ангулара или Вью свой птичий язык уровня Пага или Хэндлбарс, у Реакта — Джсх, который очень красиво интегрирует обычный Джаваскрипт с ХТМЛ.\n\nПосмотрите на это:\n\n```jsx\n// src/index.js\n\n// в props — объект со всеми атрибутами\nfunction Card(props) {\n  return (\n    <a href={props.href}>\n      <img src={imgSrc} />\n      <h3>{title}</h3>\n      <p>{priceCategory} • {category}</p>\n      <time>{deliveryTimeFrom} - {deliveryTimeTo} min</time>\n    </a>\n  )\n}\n\nfunction List() {\n  return (\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-3\">\n          <Card\n            imgSrc=\"https://i.imgur.com/v2lJHlY.png\"\n            title=\"Кофемания на Трубной\"\n            priceCategory=\"₽\"\n            category=\"Европейская\"\n            deliveryTimeFrom={15+15}\n            deliveryTimeTo={25*2}\n          >\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\nВесь секрет в том, что в Джсх в `{}` можно выполнять любой Джаваскрипт-код. Обратите внимание на атрибуты (здесь они называются пропами, `props`) `deliveryTimeFrom` и `deliveryTimeTo` — там обычный Джаваскрипт.\n\nПодробнее, как вы понимаете, в [первом этапе](https://erodionov.ru/courses/react/9wO7ihaBIk) курса по Реакту. Велкам!\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C",
        "4ipvf7K5px",
        "79Mt7wYOrs",
        "7KIkWf2nMt",
        "ypIwD9OkNU",
        "KEZTmbshEY",
        "BxVTHC2RI5",
        "Qf6hOneMdp"
      ],
      "isPublic": true,
      "id": "F0w7RYgfLs",
      "stageId": "WxcdGfFHO1"
    },
    {
      "stage": 3,
      "title": "Домены, хостинги и рабочий сайт в интернете",
      "subTitle": "Приближаемся к реальной разработке — разбираемся как устроен интернет и как проекту оказаться в нём",
      "markdown": "# Домены, хостинги и рабочий сайт в интернете\n\n> Приближаемся к реальной разработке — разбираемся как устроен интернет и как проекту оказаться в нём\n\nОкей, за нашими плечами опыт вёрстки, настройки девелоперских инструментов и разделения на исходники (удобные для разработчика) и билды (оптимизированные для продакшена).\n\nОсталось разобраться с продакшеном!\n\n## Домены, хостинги, ДНС\n\nКак устроен интернет? Во [втором уроке](https://erodionov.ru/courses/verstka/FhTKluFzm7/nHdviS9Jil) мы немного коснулись этой темы, сейчас — разберёмся подробнее.\n\nИнтернет подобен городу: у нас есть **здания** (хостинги), в которых находятся **компании** (сайты), где **реестр арендаторов** (ДНС) указывает что в конкретном **офисе** (IP-адрес) находится **филиал** компании (домен).\n\nЗафиксируем: с помощью ДНС (например, [Cloudflare](http://cloudflare.com/) или [Amazon Route 53](https://aws.amazon.com/route53/)) мы указываем, что на конкретном айпи-адресе находится наш домен.\n\nГде взять домен? Где взять айпи-адрес?\n\nДомены покупаются у регистраторов доменов (например, [Namecheap.com](http://www.namecheap.com/)), после этого вы его подключаете к какой-нибудь ДНС-панели (например, [Cloudflare](http://cloudflare.com)), где указываете его настройки.\n\nПосле вы арендуете сервер, например, на [Scaleway](https://www.scaleway.com/) или популярном [DigitalOcean](https://m.do.co/c/814480d2eb4b). Тут уже придётся возиться с линуксами или докерами, но у ДО есть огромная [база туториалов](https://www.digitalocean.com/community/).\n\nОкей, у вас есть сервер, вы его настроили ([поставив](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04) nginx), у вас есть его айпи-адрес. Его-то вы и указываете в ДНС-панели, выбрав А-запись.\n\n![](https://i.imgur.com/2DUxQYd.png)\n\n> MX-запись для почты, TXT для верификации домена у Яндекса ([Яндекс.Вебмастер](http://webmaster.yandex.ru/)) и Гугла ([Google Webmasters](https://www.google.com/webmasters)), CNAME для альясов (например, с помощью них работает [GitHub Pages](https://pages.github.com/) — хостинг фронтэнда от Гитхаба)\n\nНа самом сервере вы через веб-сервер типа [nginx](http://nginx.com/) должны настроить что должно быть по конкретному домену (или поддомену), например, на `erodionov.ru` можно настроить раздачу файлов из директории `/data/www/erodionov.ru`.\n\nВ эту директорию вы копируете файлы через утилиту [`scp`](https://en.wikipedia.org/wiki/Secure_copy).\n\n---\n\nСложно? Да нет, в целом понятно, но можно ведь проще.\n\n## CLI-хостинги\n\nВ последнее время стали популярны проекты типа [Now](https://zeit.co/now) и [surge](http://surge.sh/) — деплой через командную строку.\n\nЭти проекты заточены под одну функциональность: работа с веб-приложениями. Обычные серверы ведь неотличимы от компьютера — туда можно накидать хоть раздачу сайтов, хоть скачивание торрентов, хоть прослушивание музыки.\n\nВ Наусш такое не прокатит: он умеет только деплоить проекты и раздавать их. Да, вот так вот просто!\n\nКак с этим работать? [`now`](http://npm.im/now) это пакет из Нпма, который ставится глобально в систему (`yarn global add now`).\n\n![](https://i.imgur.com/fFUyfAv.png)\n\nЭта утилита занимается многим: от управления ДНС (`now dns`) и доменами (`now domains`) до деплоев на ресурсы Зейта (компании, которая развивает Нау).\n\nДавайте задеплоим наш тестовый проект:\n\n![](https://i.imgur.com/AO8uQHc.png)\n\nКак видите, ничего сложного — просто команда `now deploy [path]`, а в ответ — ссылка [https://test-now-zxzcvkslxi.now.sh](https://test-now-zxzcvkslxi.now.sh) на наш сайт.\n\nПочему она такая некрасивая? Деплои у Зейта **иммутабельные** — это означает, что нельзя перезаписать один и тот же сайт, каждый деплой будет уникальным.\n\n![](https://i.imgur.com/uJJ41q2.png)\n\nНо мы ведь не можем давать людям такие ссылки? Как они будут заходить на сайт?\n\nНам помогут [альясы](https://zeit.co/docs/features/aliases): они укажут что за определенным адресом (`test-now-for-verstka.now.sh`) закреплен конкретный деплой.\n\n![](https://i.imgur.com/Djtyb9A.png)\n\nМожно ли свой домен `test-now-for-verstka.ru`? [Да](https://zeit.co/docs/features/aliases#custom-domains) — читайте документацию.\n\n## Задание\n\nКупите домен (например, `ubereats-demo-erodionov`, где `erodionov` ваши имя и фамилия) на [Namecheap](https://www.namecheap.com/), подключите его к [Cloudflare](http://cloudflare.com/) и задеплойте ваш проект на [Zeit](https://zeit.co/) через [Now](https://zeit.co/now).\n\nУчтите, что задеплоен должен быть билд, а не исходник.\n\nЛоги деплоя доступны по адресу `/_logs`, а исходники — `/_src` (например, `ubereats-demo-erodionov.ru/_src`).\n\nПридётся потратиться на домен и Зейт? Ну да, но вам же нужна практика.\n\n## Итог\n\nСегодня мы узнали как устроен интернет — прошлись по сложным вещам типа айпи-адресов, ДНС, доменов и хостингов, а в конце пришли к удобному Зейту.\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C",
        "4ipvf7K5px",
        "79Mt7wYOrs",
        "7KIkWf2nMt",
        "ypIwD9OkNU",
        "KEZTmbshEY",
        "BxVTHC2RI5",
        "Qf6hOneMdp",
        "F0w7RYgfLs"
      ],
      "isPublic": true,
      "id": "QQpafAvC16",
      "stageId": "WxcdGfFHO1"
    },
    {
      "stage": 3,
      "title": "Что дальше?",
      "subTitle": "Приводим проект в порядок, подводим итоги курса и получаем план на будущее",
      "markdown": "Курс закончен! Для кого-то он длился полгода, для кого-то — по плану за две с половиной недели.\n\nЧто делать дальше?\n\nВо-первых, **закончите проект**: крепкая теория это лишь малая часть пользы, самая большая работа происходит на практике.\n\nВо-вторых, **сдайте проект**: вам нужно получить фидбэк и найти свои слабые места.\n\nВ-третьих, **добавьтесь в Курсач**: одному скучно, а у нас есть коммьюнити разработчиков.\n\n---\n\nВ-четвертых, **разберитесь куда вы хотите двигаться**. Здесь давайте поговорим подробнее.\n\nЕсли вам нравятся интерфейсы, работа с людьми — вам нужно двигаться во фронтэнд. Вёрстка это слишком просто, настоящая магия происходит во фронтэнде с реальными данными.\n\nКак вы понимаете, самый простой путь туда попасть — пройти [курс по Реакту](https://erodionov.ru/courses/react). Не бойтесь, Джаваскрипта там море — отдельный курс точно не придётся брать.\n\nЕсли вам нравится работа с данными, посмотрите в сторону бэкэнда или аналитики.\n\nЕсли вам понравилось настраивать инфраструктуру в виде серверов, Галпов и прочего — ваш путь лежит в девопс.\n\nЕсли вёрстка для вас способ решить задачу маркетинга, то, конечно, лучше идти в маркетинг. Курс по Реакту я тоже предложу взять — с ним удобнее.\n\nНу и если вам понравилась тема с семантикой и a11y — качайтесь в ней и становитесь экспертом, их не хватает.\n\n---\n\nДо новых встреч! Жду ваши проекты.\n\nЕвгений Родионов.\n\n![](https://i.imgur.com/2BlZUYN.png)\n",
      "previous": [
        "Z85TwJEQNd",
        "nHdviS9Jil",
        "kK6TqBobfl",
        "Wfn3j53w5G",
        "vUP7iRK2my",
        "mGpNZTKciZ",
        "DNmsGGToly",
        "iZzoQdvKTy",
        "dXE2elcH7C",
        "4ipvf7K5px",
        "79Mt7wYOrs",
        "7KIkWf2nMt",
        "ypIwD9OkNU",
        "KEZTmbshEY",
        "BxVTHC2RI5",
        "Qf6hOneMdp",
        "F0w7RYgfLs",
        "QQpafAvC16"
      ],
      "isPublic": true,
      "id": "jvJENno8pS",
      "stageId": "WxcdGfFHO1"
    }
  ]
}