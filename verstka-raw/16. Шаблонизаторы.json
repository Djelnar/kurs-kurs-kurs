{"stage":3,"title":"Шаблонизаторы","subTitle":"Продолжаем облегчать себе ежедневную жизнь через одномоментную боль","markdown":"В описании урока я написал про одномоментную боль — и это, к сожалению, фраза почти про любой инструмент разработчика: все эти шутки про настройки Вебпака не совсем лживы.\n\nТем не менее, не нужно расстраиваться! Нужно просто знать об этом и внимательно читать документации, гуглить и спрашивать в тематических чатах.\n\nИ помните про ошибки: они нужны, чтобы помочь вам, а не чтобы выбесить из себя. Если возникла ошибка — читайте её, гуглите и спрашивайте в чатах.\n\nОкей, погнали! Сегодня будем прикручивать шаблонизатор.\n\n## Шаблоны и компоненты\n\nШаблон это интерфейс, который можно переиспользовать с разными данными.\n\nНапример, карточка ресторана, это один **компонент**, просто с разными данными: изображением, названием, категориями, средней ценой и временем доставки.\n\n![](https://i.imgur.com/v2lJHlY.png)\n\nБыло бы здорово, если бы у нас был отдельный компонент (или шаблон), который мы могли бы использовать несколько раз. Что-то типа\n\n```css\n<template name=\"card\">\n  <img src={imgSrc} />\n  <h3>{title}</h3>\n  <p>{priceCategory} • {category}</p>\n  <time>{deliveryTimeFrom} - {deliveryTimeTo} min</time>\n</template>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n      <card\n        imgSrc=\"https://i.imgur.com/v2lJHlY.png\"\n        title=\"Кофемания на Трубной\"\n        priceCategory=\"₽\"\n        category=\"Европейская\"\n        deliveryTimeFrom=\"30\"\n        deliveryTimeTo=\"50\"\n      >\n    </div>\n  </div>\n</div>\n```\n\nСогласитесь, выглядит красиво? Поздравляю, мы написали шаблон (в теге `template`) и его использовали. Конечно, это не заработает — это псевдокод.\n\n> Я бы даже сказал, что это близко к компонентам Реакта (седьмой урок [курса по Реакту](https://erodionov.ru/courses/react/9wO7ihaBIk), но первые шесть нужно сначала пройти) — там тоже используются ХТМЛ-атрибуты для компонентов.\n\nОкей, а как сделать так, чтобы заработало?\n\n## Шаблонизаторы\n\nШаблонизатор — это специальная утилита, которая **компилирует** шаблоны (например, из своего формата в тот же ХТМЛ). Самый популярный в вёрстке — это [Паг](https://pugjs.org) (pug).\n\nВ базовом понимании шаблонизатор во время компиляции заменяет данные в шаблоне, но некоторые дают ещё дополнительные возможности.\n\n### Другой синтаксис\n\nКому-то кажется. что ХТМЛ не очень удобен, поэтому они вводят свой синтаксис:\n\n```pug\ndoctype html  \nhtml(lang='en')  \n head\n   title Pug\n body\n   h1 Pug Examples\n   div.container\n     p Cool Pug example!\n     a(href='google.com') Google\n```\n\nВыглядит странновато, но кому-то нравится.\n\n### Импорты\n\nКак раз тот пример, с которого начался урок. Нам понадобятся [миксины](https://pugjs.org/language/mixins.html) и [импорты](https://pugjs.org/language/includes.html).\n\n### Миксины\n\n```pug\nmixin article(title)\n  .article\n    .article-wrapper\n      h1= title // через = работаем с аргументами\n      if block // если есть ребёнок (он называется блоком) — отобразить\n        block\n      else // если нет, то отобразить заглушку\n        p No content provided\n\n+article('Hello world') // вызываем через +\n+article('Hello world')\n  p This is my\n  p Amazing article\n```\n\n```html\n<div class=\"article\">\n  <div class=\"article-wrapper\">\n    <h1>Hello world</h1>\n    <p>No content provided</p>\n  </div>\n</div>\n<div class=\"article\">\n  <div class=\"article-wrapper\">\n    <h1>Hello world</h1>\n    <p>This is my</p>\n    <p>Amazing article</p>\n  </div>\n</div>\n```\n\n### Инклюды\n\nНо миксины работают если они находятся в одном файле. Как быть, если хочется держать миксин в отдельном? Например, в `Card.pug`.\n\nОфициальная документация не очень помогает, поэтому пришлось гуглить «pug include with variables» и найти [ответ](https://stackoverflow.com/a/46395928/2389634) на Стэковерфлоу.\n\nСхема проста: в одном файле мы объявляем миксин, в другом — подключаем через `include` и используем.\n\n```pug\n// Card.pug\nmixin Card(title, imgSrc, priceCategory, category, deliveryTimeFrom, deliveryTimeTo)\n  .card\n    img(src=imgSrc)\n    h3= title\n    p #{priceCategory} • #{category} // со значениями можно работать и через #{}\n    time #{deliveryTimeFrom} - #{deliveryTimeTo}\n```\n\n```pug\n// List.pug\ninclude Card.pug\n\n.list\n  +Card(\"Кофемания на Трубной\", \"https://i.imgur.com/v2lJHlY.png\", \"₽\", \"Европейская\", 30, 50)\n```\n\n### Подобие нормального программирования\n\nВо многих шаблонизаторах (кстати, ещё один популярный — [Хэндлбарс](https://handlebarsjs.com/)) есть поддержка [кейсов](https://pugjs.org/language/case.html), [циклов](https://pugjs.org/language/iteration.html) и [условий](https://pugjs.org/language/conditionals.html). Здесь документация уже справляется.\n\n## Компиляция шаблонов в ХТМЛ\n\nОкей, мы написали эти шаблоны, но браузер же не поддерживает `.pug` или `.hjs`, нам нужно их перевести в ХТМЛ. Этот процесс называется **компиляцией**.\n\nНа [главной странице](https://pugjs.org/api/getting-started.html) Пага вторым параграфом идёт описание этого процесса:\n\n> The general rendering process of Pug is simple. [`pug.compile()`](https://pugjs.org/api/reference.html#pugcompilesource-options) will compile the Pug source code into a JavaScript function that takes a data object (called “`locals`”) as an argument. Call that resultant function with your data, and _voilà!_, it will return a string of HTML rendered with your data.\n\nНам тут понадобится создать файл `compile-templates.js` и написать небольшой Джс.\n\n```pug\n// src/index.pug\n\ndoctype html\n  html\n    head\n      title UberEats\n      ...\n```\n\n```js\n// compile-templates.js\nconst pug = require(\"pug\");\n\n// скомпилируем\nconst compiled = pug.compileFile(\"src/index.pug\");\n\n// отрендерим и выведем в консоль\n// через метод `console.log()`\nconsole.log(compiled());\n// \"<!doctype html><html><head><title>UberEats</title>...</head></html>\"\n```\n\n## Задание\n\n_Это задание добровольное — не всем нужны шаблонизаторы_\n\nПереведите свою вёрстку на Паг и не забудьте воспользоваться [`gulp-pug`](https://www.npmjs.com/package/gulp-pug): держать файл `compile-pug.js` не очень удобно.\n\n## Итог\n\nСегодня мы познакомились с шаблонизаторами — утилитами, которые оптимизируют наш код, приводя его к шаблонам.\n\nМожет быть, вам не всегда будет нравиться их синтаксис, но облегчать жизнь они облегчают.\n\n### Заметка про Реакт\n\nКак вы могли заметить, здесь у нас пропаганда Реакта — что уж поделать, он стал стандартом во фронтэнде.\n\nНе в последнюю очередь благодаря своему Джсх — чисто технически, это не совсем шаблонизатор, но можно назвать и так.\n\nПока у остальных библиотек и фреймворков типа Ангулара или Вью свой птичий язык уровня Пага или Хэндлбарс, у Реакта — Джсх, который очень красиво интегрирует обычный Джаваскрипт с ХТМЛ.\n\nПосмотрите на это:\n\n```jsx\n// src/index.js\n\n// в props — объект со всеми атрибутами\nfunction Card(props) {\n  return (\n    <a href={props.href}>\n      <img src={imgSrc} />\n      <h3>{title}</h3>\n      <p>{priceCategory} • {category}</p>\n      <time>{deliveryTimeFrom} - {deliveryTimeTo} min</time>\n    </a>\n  )\n}\n\nfunction List() {\n  return (\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-3\">\n          <Card\n            imgSrc=\"https://i.imgur.com/v2lJHlY.png\"\n            title=\"Кофемания на Трубной\"\n            priceCategory=\"₽\"\n            category=\"Европейская\"\n            deliveryTimeFrom={15+15}\n            deliveryTimeTo={25*2}\n          >\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\nВесь секрет в том, что в Джсх в `{}` можно выполнять любой Джаваскрипт-код. Обратите внимание на атрибуты (здесь они называются пропами, `props`) `deliveryTimeFrom` и `deliveryTimeTo` — там обычный Джаваскрипт.\n\nПодробнее, как вы понимаете, в [первом этапе](https://erodionov.ru/courses/react/9wO7ihaBIk) курса по Реакту. Велкам!\n","previous":["Z85TwJEQNd","nHdviS9Jil","kK6TqBobfl","Wfn3j53w5G","vUP7iRK2my","mGpNZTKciZ","DNmsGGToly","iZzoQdvKTy","dXE2elcH7C","4ipvf7K5px","79Mt7wYOrs","7KIkWf2nMt","ypIwD9OkNU","KEZTmbshEY","BxVTHC2RI5","Qf6hOneMdp"],"id":"F0w7RYgfLs","stageId":"WxcdGfFHO1"}