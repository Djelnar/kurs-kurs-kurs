{"stage":1,"title":"Блочная модель и поведение ЦСС","subTitle":"Стили для текста и бэкграунды это понятно, про этажность тоже помним, но как собирать страницы-то?","markdown":"## Блочная модель\n\nКак мы помним из истории, ХТМЛ и ЦСС изначально использовались для вёрстки документов, но на самом деле ещё с [первой версии CSS](https://www.w3.org/TR/CSS1/#formatting-model) у нас есть концепт **блочной модели**. Что это?\n\nВ третьем уроке мы узнали, что элементы бывают трёх типов: блочными, инлайновыми и инлайн-блочными. Но какое поведение у блочных элементов, не считая того, что они занимают 100% ширины (по-умолчанию) и им можно задавать ширину-высоту?\n\n_Кстати, это управляется через свойство `display`: `block`, `inline`, `inline-block` или `none`_\n\nУ элемента есть несколько свойств, которые влияют на его **размер**:\n\n* ширина — `width`,\n* высота — `height`,\n* внутренние отступы — `padding`,\n* бордеры — `border`,\n* внешние отступы — `margin`.\n\n### Ширина и высота\n\nС шириной и высотой всё просто: блочный элемент занимает 100% ширины и высоту контента, если не указано другое через свойства [`width`](http://cssreference.io/property/width),\n[`max-width`](http://cssreference.io/property/max-width),\n[`min-width`](http://cssreference.io/property/min-width) и\n[`height`](http://cssreference.io/property/height),\n[`max-height`](http://cssreference.io/property/max-height),\n[`min-height`](http://cssreference.io/property/min-height).\n\nУточню, что при вложенности элемент занимает 100% ширины **родителя**, а не всей страницы.\n\n<div class=\"aside-wrapper\">\n  <img src=\"https://i.imgur.com/P8QdOVj.png\" style=\"box-shadow: 0px 0px 0px 20px #6041FB\">\n  <aside>\n    <b style=\"color: #8DB6C1\">синим</b> выделен размер контента\n  </aside>\n</div>\n\nПочему в этом примере у заголовка сверху есть пустое пространство контента? Потому что высота контента складывается из `font-size` + `line-height`.\n\n### Отступы — `padding` и `margin`\n\nНо почему между заголовком и текстом есть пустое пространство? Я решил дать тексту **внутренний отступ** ([`padding`](http://cssreference.io/property/padding)), а заголовку — внешний ([`margin`](http://cssreference.io/property/margin)).\n\n<div class=\"aside-wrapper\">\n  <img src=\"https://i.imgur.com/HxolrmF.png\" style=\"box-shadow: 0px 0px 0px 20px #6041FB\">\n  <aside>\n    <ul>\n      <li><b style=\"color: #8DB6C1\">синим</b> выделен размер контента</li>\n      <li><b style=\"color: #F8CCA1\">оранжевым</b> выделен <code>margin</code></li>\n      <li><b style=\"color: #C4CF8E\">зеленым</b> выделен <code>padding</code></li>\n    </ul>\n  </aside>\n</div>\n\nКак решить когда ставить паддинг, а когда — марджин?\n\nУ меня правило простое: если я хочу **оттолкнуть элемент от другого — ставлю марджин**. Если я хочу, чтобы **элемент был больше — ставлю паддинг**. В чём плюс? Бэкграунд распространяется на паддинг.\n\n![](https://i.imgur.com/ao8qm4I.png)\n\nПолный код выглядит так:\n\n<div class=\"aside-wrapper\">\n  <img src=\"https://i.imgur.com/auK23Lk.png\">\n  <aside>\n    Я сознательно опустил теги html, head, body и другие\n  </aside>\n</div>\n\n### Бордеры\n\nБордеры ([`border`](http://cssreference.io)) — это границы **внутреннего размера** блока (включая паддинги).\n\nТут особо ничего не расскажешь: хотите поставить поребрики — пишите `border: [size] [kind] [color]`, например, `border: 1px solid black`.\n\n### Свойство [`box-sizing`](http://cssreference.io/property/box-sizing)\n\nЦСС — гибкий. По-умолчанию браузеры высчитывают фактические ширину и высоту элемента по его контенту (и свойствам `width`, `height`), а паддинги и бордеры не входят в эту ширину.\n\nЧем это грозит? Если у вас есть родитель с фиксированной шириной, то ребенок при `content-box` вывалится как Новая Москва в Московскую область.\n\n<div class=\"aside-wrapper\">\n  <img src=\"https://i.imgur.com/UDrCmnT.png\">\n  <aside>\n    Пример взят <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing\">с MDN</a>\n  </aside>\n</div>\n\nКак это исправить? Пол Ириш (разработчик Гугл Хрома) [рекомендует ставить](https://www.paulirish.com/2012/box-sizing-border-box-ftw/) `box-sizing: border-box` всем элементам.\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\n```\n\nТак, стоп, `inherit`? Что это?\n\n## Каскад и наследование\n\nПришло время поговорить о том, почему ЦСС мощная, но иногда неудобная штука. Помните, как расшифровывается аббревиатура? **Cascading** Style Sheets.\n\nЦСС базируется на двух китах: каскаде и наследовании.\n\n### Наследование\n\nЕсли вкратце, то внутренние элементы **могут** наследовать значения родителя — помните, я давал тегу `article` стили, а параграфы отнаследовали значения шрифтов: `font-size`, `line-height`, `color`. Это потому что у них по-умолчанию стоят значения `inherit`!\n\n### Каскад\n\nНо их, конечно, можно переопределить. Возвращаясь к каскаду (грубо говоря, водопад), у нас есть **правило номер один, порядок: каждое нижнее правило переопределяет предыдущее**:\n\n<div class=\"aside-wrapper\">\n  <img src=\"https://i.imgur.com/BiMpaz4.png\">\n  <aside>\n    Каким цветом будет параграф? <b style=\"color: green\">Зеленым</b>.\n  </aside>\n</div>\n\nОк, но что будет, если мы поменяем местами правила? `.paragraph {}` поставим первым, а `p {}` — вторым? Ничего не будет, параграф всё равно будет зеленым.\n\nНо почему? Потому что **правило номер два, специфичность: селектор по айди мощнее селектора по класса, который мощнее селектора по тегам**. `#id {}` > `.class {}` > `tag {}`. На самом деле селекторов очень много, подсмотреть можно на [Cheetyr](http://www.cheetyr.com/css-selectors).\n\n<div class=\"aside-wrapper\">\n  <img src=\"https://i.imgur.com/uEKyBEg.png\">\n  <aside>\n    Каким будет будет параграф? <b style=\"color: blue\">Синим</b>.\n  </aside>\n</div>\n\nНа селекторах дело не заканчивается, есть **правило номер три, важность: через `!important` можно переопределить всё что угодно**.\n\n<div class=\"aside-wrapper\">\n  <img src=\"https://i.imgur.com/ZwTVXzf.png\">\n  <aside>\n    Каким будет будет параграф? <b style=\"color: red\">Красным</b>.\n  </aside>\n</div>\n\nНо есть огромная опасность в использовании `!important`:\n\n<p class=\"announce\">\n  !important ломает предсказуемость\n</p>\n\nВы больше не можете ручаться, что стили будут вести себя так, как вы их написали, поэтому за `!important` **нужно пиздить ногами**.\n\n## normalize.css и reset.css\n\nУ разных браузеров свои дефолтные стили: так сложилось за годы их существования, а ломать старое поведение никто не хочет.\n\nПоэтому мы пользуемся [`normalize.css`](https://necolas.github.io/normalize.css/): ЦСС-файл с готовыми свойствами, который **нормализует** (приводит к одному виду) разные стили в браузерах. Скачиваем, закидываем в проект, подключаем через `<link rel=\"stylesheet\">`.\n\nРаньше люди использовали `reset.css` — он в ноль скидывал дефолтные значения, но это не самый удобный путь: приходится всё заново писать, поэтому мы используем `normalize.css`.\n\n## Инструменты разработчика в браузерах\n\nКстати, вам же нужно изучать, то что получилось? Для этого в браузерах есть **инструменты разработчика** — в Хроме это [Chrome DevTools](https://developer.chrome.com/devtools), в Сафари [Web Development Tools](https://developer.apple.com/safari/tools/), в Файрфоксе — [Firefox Developer Tools](https://developer.mozilla.org/son/docs/Tools).\n\nМожно изучать получившееся **дерево элементов** (оно же `DOM`), стили, блочную модель.\n\n![](https://i.imgur.com/Q1VqCDx.png)\n\n## Задание\n\nПро блочную модель всё понятно, про `box-sizing` тоже, даже про каскад и наследование поговорили. Про нормалайз даже зацепили!\n\nЗадание у нас уже посложнее: сегодня нужно разобраться с блочной моделью.\n\n![](https://i.imgur.com/YjR9Zot.png)\n\nНужно:\n\n* добавить отступов первому этажу,\n* сблизить заголовок и подзаголовок,\n* добавить внутреннего отступа второму этажу\n\n<p class=\"announce\">\n  Не забывайте задавать вопросы в чате — там обязательно помогут 💪🏻 <br><br> Помните: нет глупых вопросов, есть лишь страх их задавать.\n</p>\n\n## Ответ на прошлое задание\n\n```css\nbody {\n  font-size: 22px;\n  line-height: 34px;\n}\n\nheader,\nnav {\n  background-color: #fd739c;\n  color: #fff;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\nh1,\nh2 {\n  font-family: Arial, Helvetica, sans-serif;\n}\n```\n\n* стили текста мы вешаем на `body`, потому что параграфы их отнаследуют,\n* с `header` та же самая ситуация — тексты станут белыми и со шрифтом без засечек,\n* `header, nav` потому что селекторы можно перечислять,\n* при `font-family: Arial, Helvetica, sans-serif` браузер берёт Arial, если его нет — Helvetica, если и её нет — системный шрифт без засечек.\n\n## Итог\n\nМы разобрались с блочной моделью, поняли про каскад и наследование: работу селекторов и правил, узнали чем плох `!important`, взяли в работу `normalize.css` и открыли для себя инструменты разработчика. Чудесно? Да.\n\nДальше — про флексбоксы и сетки.\n","previous":["Z85TwJEQNd","nHdviS9Jil","kK6TqBobfl","Wfn3j53w5G"],"id":"vUP7iRK2my","stageId":"FhTKluFzm7"}