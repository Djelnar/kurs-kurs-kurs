{"stage":1,"title":"Адаптивность","subTitle":"Приводим сетку к продакшен-реди решению, изучаем адаптивность","markdown":"## Доделываем сетку\n\nБазовую версию сетки мы сделали. Напомню, где мы остановились:\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/y29uhtbL/22/embedded/result,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n1. сделали 12 колонок,\n2. сделали `.row`,\n3. сделали контейнер `.container`, чтобы фиксировать ширину контента\n\nНо есть один нюанс: если мы зададим контейнеру бэкграунд, чтобы проверить как всё отработало, мы заметим один мерзкий баг — у контейнера есть отступы слева и справа.\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/y29uhtbL/21/embedded/result,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nОтступы есть по очевидной причине: у наших `.col-*`-классов есть `padding-left` и `padding-right`. Но как от них избавиться **только** в контейнере?\n\nВ этом нам помогут **отрицательные марджины**. Отрицательные марджины — зло и показатель непонимания блочной модели, но любое зло всегда имеет право на реализацию в каких-то пограничных случаях (edge cases).\n\nМы повесим отрицательные марджины слева и справа на `.row`:\n\n```css\n.row {\n  margin-left: -8px;\n  margin-right: -8px;\n}\n```\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/y29uhtbL/23/embedded/result,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nВсё сразу же стало по красоте. Подчистим наш код, приведём в порядок — получим готовую сетку.\n\n```css\n.container {\n  max-width: 976px;\n}\n\n.row {\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -8px;\n  margin-right: -8px;\n}\n\n.col-1,\n.col-2,\n.col-3,\n.col-4,\n.col-5,\n.col-6,\n.col-7,\n.col-8,\n.col-9,\n.col-10,\n.col-11,\n.col-12 {\n  padding-left: 8px;\n  padding-right: 8px;\n  box-sizing: border-box;\n}\n\n.col-1 {\n  flex-basis: 8.3333%;\n}\n.col-2 {\n  flex-basis: 16.6666%;\n}\n.col-3 {\n  flex-basis: 24.9999%;\n}\n.col-4 {\n  flex-basis: 33.3333%;\n}\n.col-5 {\n  flex-basis: 41.6665%;\n}\n.col-6 {\n  flex-basis: 49.9998%;\n}\n.col-7 {\n  flex-basis: 58.3331%;\n}\n.col-8 {\n  flex-basis: 66.6664%;\n}\n.col-9 {\n  flex-basis: 74.9997%;\n}\n.col-10 {\n  flex-basis: 83.3333%;\n}\n.col-11 {\n  flex-basis: 91.6663%;\n}\n.col-12 {\n  flex-basis: 100%;\n}\n```\n\nКрасиво? Удобно? Да.\n\n---\n\nРезюмируя: мы не только поняли, что такое модульная сетка, но и научились сами её собирать на флексбоксах, разобрались, зачем нужен `.row` и как вместить наш контент в фиксированный контейнер.\n\n---\n\nКстати, частый кейс — как сделать бэкграунд во всю ширину, а контент — в контейнере? Я думаю, вы догадались об ответе, но всё-таки.\n\n```html\n<style>\n  header {\n    background-color: #6041FB;\n  }\n</style>\n\n<header>\n  <div class=\"container\">\n    <h1>Курс по вёрстке</h1>\n  </div>\n</header>\n```\n\n## Адаптивность\n\nПоговорим об адаптивности.\n\nКогда делают сайты и веб-приложения, очень редко делают отдельные мобильные версии (типа [mobile.twitter.com](https://mobile.twitter.com)), чаще всего делают адаптивную вёрстку.\n\nЧто такое адаптивность? Способность приспосабливаться к изменениям. Адаптивная вёрстка? Способная приспосабливаться к изменениям!\n\nВы спросите: «да к каким изменениям-то?», а я отвечу «ко многим, но давайте разберемся с примитивами».\n\nВ ЦСС есть мощная штука **медиакверис** (media queries). Это условия, при которых выполняется, эээ, код, если ЦСС можно назвать таковым.\n\nСемантика у неё простая:\n\n```css\n@media <media-query-list> {\n  /* css */\n}\n```\n\nГде `<media-query-list>` это набор правил.\n\n### `media-type`\n\nВсё просто: тип устройства. Нет, это не разграничение на айфоны и андроиды, макбуки и синкпады, это\n\n* `all` — любое устройство,\n* `screen` — _color computer screens_,\n* `print` — стили для печати,\n* `speech` — скринридеры.\n\nПримеры:\n\n```css\n@media print {\n  body {\n    font-size: 10pt;\n  }\n}\n\n@media screen {\n  body {\n    font-size: 13px;\n  }\n}\n\n@media screen, print {\n  body {\n    line-height: 1.2;\n  }\n}\n```\n\n### `media-feature`\n\nИх [очень много](https://developer.mozilla.org/en-US/docs/Web/CSS/@media#media-in-parens), но в основном используют `min-width` — определить ширину экрана.\n\nПримеры:\n\n```css\nbody {\n  color: orange;\n}\n\n@media (min-width: 768px) {\n  body {\n    color: red;\n  }\n}\n\n@media (min-width: 992px) {\n  body {\n    color: green;\n  }\n}\n\n@media (min-width: 1200px) {\n  body {\n    color: blue;\n  }\n}\n```\n\n<p>По-умолчанию (на маленьких устройствах) цвет текста будет <b style=\"color: orange\">оранжевым</b>, при ширине от 768 пикселей — <b style=\"color: red\">красным</b>, от 992 пикселей — <b style=\"color: green\">зеленым</b>, а от 1200 — <b style=\"color: blue\">синим</b>.</p>\n\nКак разобраться, какие размеры прописывать? Есть два способа: запомнить самые общие популярные параметры или подсматривать на [screensiz.es](http://screensiz.es/).\n\n#### Брейкпоинты\n\nТакие параметры называются **брейкпоинтами** (breakpoints, точки слома): точки, когда поведение должно поменяться. Но, например, [Миша Капанага с этим не согласен](https://medium.com/@kapanaga/ed720be2ac10) и я тоже с ним соглашусь — всегда нужно смотреть на конкретном сайте и исправлять конкретные проблемы, просто популярные брейкпоинты помогают ориентироваться.\n\nТак какие значения-то? Они бьются по размерам:\n\n* **xs** это экраны до 576 пикселей (смартфоны),\n* **sm** — от 576 до 768 (большие смартфоны и планшеты в вертикальной ориентации),\n* **md** — от 768 до 991 (планшеты в горизонтальной),\n* **lg** — от 991 до 1200 (десктопы),\n* **xl** — от 1200 и выше (большие десктопы).\n\nЕсть небольшое уточнение: хоть и фактическая ширина тех же айфонов — 750 пикселей, она делится на два (375 пикселей) и вписываются в **xs**, потому что там Ретина. Как разобраться? Смотреть на значения `pixel ratio` и `CSS width` на сайте [mydevice.io/devices](https://mydevice.io/devices).\n\n### Как строить адаптивность или mobile first\n\nСуществует подход mobile first, когда вы учитываете сначала мобильные девайсы и постепенно увеличиваетесь.\n\nЧестно говоря, сам термин давно устарел, я бы его назвал **low first** — сначала мы разбираемся с возможностями слабых (маленьких) устройств, а потом наращиваем мощности.\n\nВ нашем примере выше мы сначала объявили `body { color: orange; }`, а потом на брейкпоинтах ломали это значение, когда увеличивалась ширина экрана.\n\nПримеры практики:\n\n* на маленьких девайсах мы размеры заголовков ставим в 26 пикселей, а на больших можем разогнаться и поставить 72,\n* на маленьких девайсах мы можем блоки разместить друг под другом (`display: block`), а на больших они вместятся рядом — поставим `display: inline-block`.\n\nПоэтому всегда пишите код через **mobile first**: его легче будет дебажить (debug, отладка) и читать, он остаётся предсказуемым — ведь если мы видим чёткую нисходящую картину по размерам, то это легче понять, чем кучу свойств `max-width`.\n\nПлохо: тяжело читать.\n\n```css\n@media (min-width: 1200px) {\n  body {\n    color: blue;\n  }\n}\n\nbody {\n  color: orange;\n}\n\n@media (max-width: 992px) {\n  body {\n    color: green;\n  }\n}\n\n@media (max-width: 768px) {\n  body {\n    color: red;\n  }\n}\n```\n\nХорошо: правила идут по увеличению экранов.\n\n```css\nbody {\n  color: orange;\n}\n\n@media (min-width: 768px) {\n  body {\n    color: red;\n  }\n}\n\n@media (min-width: 992px) {\n  body {\n    color: green;\n  }\n}\n\n@media (min-width: 1200px) {\n  body {\n    color: blue;\n  }\n}\n```\n\n## Задание\n\nСделайте планшетную и мобильную версии UberEats.\n\nНо дополнительное задание: вернемся к сетке — пора её сделать адаптивной!\n\nЕсли мы останемся с нашими `.col-*`, то у нас будут проблемы: на xs нам нужны элементы, которые идут друг за другом, на md они могут вместиться по 2 на строку, а на lg — вообще по 4 в одну строку. Текущая сетка этого не поддерживает.\n\nЗадание: сделать классы `.col-[size]-*`, где `size` это брейкпоинты.\n\nПримеры использования:\n\n```html\n<div class=\"row\">\n  <div class=\"col-xs-11 col-md-6 col-lg-3\">test</div>\n  <div class=\"col-xs-11 col-md-6 col-lg-3\">test</div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-xs-11 col-sm-4 col-xl-2\">test</div>\n  <div class=\"col-xs-11 col-sm-4 col-xl-2\">test</div>\n</div>\n```\n\nКстати, в первом примере я опустил `sm` значение, а во втором — `md`. Почему?\n\nПотому что действует тот же принцип mobile first: то, что объявлено ниже, наследуется, пока не встретится брейкпоинт.\n\n<p class=\"announce\">\n  Не забывайте задавать вопросы в чате — там обязательно помогут 💪🏻 <br><br> Помните: нет глупых вопросов, есть лишь страх их задавать.\n</p>\n\nПодсказка:\n\n```css\n.col-xs-7 {\n  flex-basis: 58.3331%;\n}\n\n... @media (min-width: 768px) {\n  .col-md-3 {\n    flex-basis: 24.9999%;\n  }\n}\n```\n\n## Итог\n\nМы доделали сетку: исправили баг с контейнером и разобрались, когда нужно использовать отрицательные марджины.\n\nПлюс изучили адаптивность через медиакверис и познакомились с принципом mobile first.\n","previous":["Z85TwJEQNd","nHdviS9Jil","kK6TqBobfl","Wfn3j53w5G","vUP7iRK2my","mGpNZTKciZ"],"id":"DNmsGGToly","stageId":"FhTKluFzm7"}