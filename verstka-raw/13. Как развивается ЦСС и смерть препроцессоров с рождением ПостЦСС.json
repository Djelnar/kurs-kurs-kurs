{"stage":3,"title":"Как развивается ЦСС и смерть препроцессоров с рождением ПостЦСС","subTitle":"ЦСС не стоит на месте — а как нам писать будущий ЦСС уже сегодня?","markdown":"ЦСС развивается — когда-то мы получили стандарт ЦСС3, а теперь W3C (помните? консорциум, который развивает веб) решил перейти на релизы [конкретных спецификаций](https://www.w3.org/Style/CSS/current-work) разными рабочими группами, поэтому теперь у нас есть не ЦСС4, не ЦСС5, не ЦСС 3.2.1.1.3.211.522, а конкретные фичи и их реализации в браузере.\n\nНапример, во [многих браузерах](https://caniuse.com/#search=css%20variables) уже есть [**Custom Properties**](https://www.w3.org/TR/css-variables/) — это переменные в ЦССе.\n\n```css\n:root {\n  --mainColor: red;\n}\n\na {\n  color: var(--mainColor);\n}\n```\n\nИли [**Custom Media Queries**](https://drafts.csswg.org/mediaqueries-5/#custom-mq):\n\n```css\n@custom-media --md-viewport (min-width: 796px);\n\n@media (--md-viewport) {\n  /* styles for small viewport */\n}\n```\n\nА также [`image-set()`](https://drafts.csswg.org/css-images-3/#image-set-notation) для нескольких изображений:\n\n```css\n.foo {\n  background-image: image-set(\n    url(img/bg.png) 1x,\n    url(img/bg-2x.png) 2x,\n    url(bg-print.png) 600dpi\n  );\n}\n```\n\nПсевдокласс [`:matches()`](http://dev.w3.org/csswg/selectors-4/#matches):\n\n```css\n.description:matches(:first-child, .special) {\n  color: red;\n}\n```\n\nИ много других. Но как это всё использовать в проекте? Для этого существует [cssnext](http://cssnext.io/) — пакет плагинов для ПостЦСС.\n\n## [ПостЦСС](http://postcss.org/)\n\n… ПостЦСС? Чего?\n\nПостЦСС это утилита, которая трансформирует ваш ЦСС с помощью джс-плагинов.\n\nЧисто технически, ПостЦСС это парсер ЦСС — он разбирает ваш ЦСС на понятный себе формат, с которым уже потом работают плагины. Например, есть плагин [Autoprefixer](https://github.com/postcss/autoprefixer): он на выходе выдаёт код с браузерными префиксами:\n\n```css\n/* input */\na {\n  display: flex;\n}\n\n/* output */\na {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n```\n\nИли тот же cssnext:\n\n```css\n/* input */\n:root {\n  --red: #d33;\n}\na {\n  &:hover {\n    color: color(var(--red) a(54%));\n  }\n}\n\n/* output */\na:hover {\n  color: #dd3333;\n  color: rgba(221, 51, 51, 0.54);\n}\n```\n\nУдобно? Чертовски.\n\nКстати, у фронтэндеров есть [ESLint](https://eslint.org) — штука, которая следит за качеством кода, а у верстальщиков — [stylelint](https://stylelint.io/). Конечно, есть [плагин](https://github.com/shinnn/vscode-stylelint) для ВСКода — поставите и будете в редакторе видеть, в чём у вас говнокод.\n\n### Настроим ПостЦСС с `cssnext`\n\nПомните, в первом уроке я говорил, что большинство приложений и утилит для разработчиков идут только с командным интерфейсом и работать с ними можно только в консоли? Вот теперь пора вернуться к Терминалу.\n\n#### Нода и пакетные менеджеры `npm` и `yarn`\n\nДля начала нам нужно поставить Ноду (Node.js) — она выполняет джс-файлы не в браузере.\n\n##### Windows\n\nСкачайте с сайта [nodejs.org](https://nodejs.org/en/).\n\n##### Unix\n\nПоставьте из своих репозиториев: `apt-get`, `yum` и так далее.\n\n##### macOS\n\nВ Маке нет встроенного пакетного менеджера (а зря!), поэтому сначала нужно поставить [Homebrew](http://brew.sh/).\n\nПоставьте Ноду через команду `brew install node`.\n\n---\n\nВместе с Нодой идёт пакетный менеджер [`npm`](https://www.npmjs.com/) — node package manager.\n\nПакетный менеджер делится на две вещи: база пакетов и клиент, который работает с ней. Команда `npm` и есть этот самый клиент.\n\nПроблема в том, что нпм работал плохо и медленно, поэтому ребята из Фейсбука сделали свой пакетный менеджер [Ярн](http://yarnpkg.com/): он работает быстрее и предсказуемее.\n\nЧто такое вообще пакетный менеджер и почему предсказуемость и скорость так важны?\n\n* **Во-первых**, во время разработки вы будете использовать много сторонних модулей — ведь кучу вещей кто-то за вас уже когда-то написал, осталось это только подключить и использовать.\n\n* **Во-вторых**, говоря про скорость: у каждого пакета могут быть свои зависимости (по 2-3), а в проекте, например, 100 зависимостей. Вместо 100 у вас устанавливается 300: 100 основных пакетов и их зависимостей. Может быть долго!\n\n* **В-третьих**, пакеты соблюдают [Семвер](http://semver.org/) — семантичное версионирование. Дело в том, что пакеты обновляются, а ломать работающие приложения из-за этого не хочется, поэтому у нас есть версионирование `MAJOR.MINOR.PATCH` (например, Реакт сейчас — 16.0.0). `npm` раньше не уважал прописанные в `package.json` версии и порою всё ломалось. В Ярне такого нет изначально.\n\nПакеты проекта в джс-мире описываются в файле [`package.json`](https://docs.npmjs.com/files/package.json) в секциях `dependencies` и `devDependencies`.\n\n#### dependencies\n\nВсе зависимости, которые **используются в приложении**: Реакт, [normalize.css](https://necolas.github.io/normalize.css/), готовая адаптивная сетка [flexboxgrid2](https://github.com/evgenyrodionov/flexboxgrid2).\n\n#### devDependencies\n\nЗависимости, которые **помогают работать приложению**: Стайллинт или тот же ПостЦСС.\n\nКак поставить Ярн? [Описано в документации](https://yarnpkg.com/en/docs/install).\n\nКак использовать пакетный менеджер? Как и `brew` из Макоси! `yarn add [название пакета]`, например, `yarn add react` установит Реакт последней версии и сохранит его в `package.json`.\n\nКоманда `yarn` (сокращенно от `yarn install`) установит все зависимости, которые указаны в `package.json`.\n\n---\n\nОкей, Ноду поставили, с пакетным менеджером разобрались, теперь нужно поставить ПостЦСС и настроить его на работу с цсснекст.\n\nСначала нужно выполнить команду `yarn init`: она создаст файл `package.json`, в котором будут указаны настройки проекта.\n\nПосле — читаем [установку цсснекст](http://cssnext.io/setup/): нам нужно поставить две зависимости postcss и postcss-cssnext через команду\n\n```sh\nnpm install postcss postcss-cssnext\n```\n\nНпм нас, конечно, мало интересует, поэтому мы будем сразу ставить через Ярн и в `devDeps`:\n\n```sh\nyarn add --dev postcss postcss-cssnext\n```\n\nЯрн установит и сохранит в `package.json`:\n\n```json\n{\n  ...\n  \"devDependencies\": {\n    \"postcss\": \"6.0.15\",\n    \"postcss-cssnext\": \"3.0.2\"\n  }\n  ...\n}\n```\n\nОкей! В документации сказано, что можно использовать разными способами, но нас интересует CLI (command line interface): мы будем запускать в Терминале.\n\n![](https://i.imgur.com/dcuoIG2.png)\n\nДля этого нам нужно поставить [postcss-cli](https://www.npmjs.com/package/postcss-cli) (да, ссылка на нпм, хоть и будем ставить через Ярн — потому что Ярн использует базу нпма).\n\n```sh\nyarn add --dev postcss-cli\n```\n\nЗатем создаём файл `postcss.config.js` (ваш первый опыт с джсом!) и пишем там:\n\n```\nmodule.exports = {\n  plugins: [\n    require('postcss-cssnext')()\n  ]\n}\n```\n\nПро `module.exports` и `require()` мы поговорим позже.\n\nОкей, теперь нужно проверить, что всё работает. У нас будут файлы `styles/style.css` и `build/styles/style.css` — во втором будет наш ЦСС, _скомпилированный_ через ПостЦСС и цсснекст.\n\n```\npostcss [input.css] [OPTIONS] [-o|--output output.css] [-w|--watch]\n```\n\nНаша команда будет выглядеть так:\n\n```\nyarn postcss styles/style.css --output build/styles/style.css --watch\n```\n\nЧто за `--watch`? `postcss-cli` будет перезапускаться на каждое изменение файлов. Без `--watch` будет один раз компилироваться.\n\n## Итог\n\nМы узнали про будущий ЦСС и как его заставить работать уже сегодня: через ПостЦСС и цсснекст.\n\n## Задание\n\nПрочитайте [фичи цсснекст](http://cssnext.io/features/) и переводите свои стили на будущий ЦСС.\n","previous":["Z85TwJEQNd","nHdviS9Jil","kK6TqBobfl","Wfn3j53w5G","vUP7iRK2my","mGpNZTKciZ","DNmsGGToly","iZzoQdvKTy","dXE2elcH7C","4ipvf7K5px","79Mt7wYOrs","7KIkWf2nMt","ypIwD9OkNU"],"id":"KEZTmbshEY","stageId":"WxcdGfFHO1"}