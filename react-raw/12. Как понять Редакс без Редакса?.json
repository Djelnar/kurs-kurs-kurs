{"stage":2,"title":"Как понять Редакс без Редакса?","subTitle":"Редакс умещается в 100 строчек и его можно воссоздать на обычном `setState`. Как?","markdown":"Что такое [Редакс](https://redux.js.org/)? Это библиотека для работы с состоянием, стейт-менеджер. В чём её отличие от `setState`? В немного другом АПИ и библиотеке [react-redux](https://npm.im/react-redux), благодаря которой можно цепляться к стейту в любом компоненте.\n\nОсновная идея Редакса в глобальном стейте: у вас есть один источник данных, который вы цепляете к компоненту.\n\nК сожалению, часто люди возводят это в абсолют и **все** данные засовывают в стейт Редакса. Получается сложно и неудобно, появляются библиотеки типа [redux-saga](https://github.com/redux-saga/redux-saga) чтобы справиться с этим добром, развиваются мифы о сложности Редакса. Даня Абрамов, автор, настолько в ахуе, что даже написал статью [You Might Not Need Redux](https://medium.com/@dan_abramov/be46360cf367).\n\n**Главное правило** работы с Редаксом: глобальный стейт нужен только когда нужно расшарить данные между компонентами, у которых родитель находится слишком далеко.\n\nДавайте рассмотрим на сайте jqestate.ru.\n\nДля начала зайдём в загородную недвижимость, загрузим список объектов через АПИ и сохраним его в стейт Редакса.\n\n![](https://i.imgur.com/z2xNnwq.jpg)\n\nПочему мы сохраняем здесь данные именно в стейт Редакса? Потому что мы их можем **переиспользовать**: скорее всего, с этой страницы человек перейдёт внутрь объекта (дома либо участка).\n\nДа, мы внутри той страницы всё равно сделаем запрос (вдруг данные изменились), но мы уже можем показать то, что есть:\n\n![](https://i.imgur.com/8lytp9h.jpg)\n\nНа этой же странице внизу есть блок «Похожие объекты», где такие же карточки. Если данные уже есть, то почему бы их не использовать?\n\n![](https://i.imgur.com/VSZsdu9.jpg)\n\n---\n\nЕсли бы мы не использовали Редакс, то нам бы пришлось данные кидать аж в корневой компонент `<App />` и хранить в его стейте. Не очень удобно.\n\n---\n\nКстати, а как эффективно хранить данные? С сервера приходит массив, что с ним потом делать?\n\n```js\nconst response = {\n  items: [\n    {\n      id: 1107,\n      name: \"1-ое Успенское шоссе\",\n      aliases: [],\n      propertyCategories: [\"country\"],\n      location: {\n        countryId: 1,\n        regionId: 1003,\n        districtId: 1012,\n        routeId: 1178,\n        countryName: \"Россия\",\n        regionName: \"Московская область\",\n        districtName: \"Одинцовский\",\n        routeName: \"Рублёво-Успенское\"\n      },\n      createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n      updatedAt: \"2016-08-23T12:22:43.472+03:00\"\n    },\n    {\n      id: 1137,\n      name: \"2-ое Успенское шоссе\",\n      aliases: [],\n      propertyCategories: [\"country\"],\n      location: {\n        countryId: 1,\n        regionId: 1003,\n        districtId: 1012,\n        routeId: 1178,\n        countryName: \"Россия\",\n        regionName: \"Московская область\",\n        districtName: \"Одинцовский\",\n        routeName: \"Рублёво-Успенское\"\n      },\n      createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n      updatedAt: \"2016-08-23T12:22:26.629+03:00\"\n    },\n    {\n      id: 1973,\n      name: \"Аксаково\",\n      aliases: [],\n      propertyCategories: [\"country\"],\n      location: {\n        countryId: 1,\n        regionId: 1003,\n        districtId: 1720,\n        routeId: 1185,\n        countryName: \"Россия\",\n        regionName: \"Московская область\",\n        districtName: \"Мытищинский\",\n        routeName: \"Дмитровское\"\n      },\n      createdAt: \"2016-06-06T18:02:20.503+03:00\",\n      updatedAt: \"2016-06-06T18:02:20.503+03:00\"\n    },\n    {\n      id: 1174,\n      name: \"Аксиньино\",\n      kindName: \"нас. пункт\",\n      aliases: [],\n      propertyCategories: [\"country\"],\n      location: {\n        countryId: 1,\n        regionId: 1003,\n        districtId: 1012,\n        routeId: 1178,\n        countryName: \"Россия\",\n        regionName: \"Московская область\",\n        districtName: \"Одинцовский\",\n        routeName: \"Рублёво-Успенское\"\n      },\n      createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n      updatedAt: \"2016-02-15T19:07:08.916377+03:00\"\n    },\n    {\n      id: 1100,\n      name: \"Алабино\",\n      kindName: \"нас. пункт\",\n      aliases: [],\n      propertyCategories: [],\n      location: {\n        countryId: 1,\n        regionId: 1003,\n        districtId: 1721,\n        routeId: 1177,\n        countryName: \"Россия\",\n        regionName: \"Московская область\",\n        districtName: \"Наро-Фоминский\",\n        routeName: \"Киевское\"\n      },\n      createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n      updatedAt: \"2016-02-15T19:07:08.916377+03:00\"\n    },\n    {\n      id: 1112,\n      name: \"Александровка\",\n      kindName: \"нас. пункт\",\n      aliases: [],\n      propertyCategories: [\"country\"],\n      location: {\n        countryId: 1,\n        regionId: 1003,\n        districtId: 1009,\n        routeId: 1192,\n        countryName: \"Россия\",\n        regionName: \"Московская область\",\n        districtName: \"Красногорский\",\n        routeName: \"Ильинское\"\n      },\n      createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n      updatedAt: \"2016-02-15T19:07:08.916377+03:00\"\n    }\n  ],\n  pagination: {\n    total: 258,\n    limit: 32,\n    offset: 0\n  }\n};\n```\n\nДопустим, мы даже говорим не про Редакс, а в принципе про эффективную работу с разными типами данных.\n\nОбычно для этого пишут **маппер** (mapper) — функцию, которая преобразовывает из одного формата в другой, более удобный. Какой маппер могли бы мы написать?\n\nЯ предлагаю перевести массив в объект с ключами-айдишниками и завести поле `list`, где будет перечисление этих айдишников. Для этого мы возьмём метод [`.reduce`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) у массива.\n\nРедьюс принимает два аргумента: функцию-коллбек и начальное значение.\n\nВ функцию-коллбек приходят два аргумента: предыдущее значение и текущее, а возвращать она должна **конечное** значение. Она работает как аккумулятор: к накопленному прошлому добавляет текущее.\n\n```js\nfunction mapItemsToObjects(items) {\n  const reducedItems = items.reduce(function(prevValue, currentValue) {\n    // мы будем использовать два нововведения ES2015\n    // спред-оператор https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n    // и computed property names https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names\n    return {\n      ...prevValue,\n      [currentValue.id]: currentValue\n    };\n  }, {});\n\n  return {\n    ...reducedItems, // скопируем содержимое reducedItems\n    list: items.map(function(item) {\n      return item.id; // пройдёмся по массиву и вернём только айдишники\n    })\n  };\n}\n\nconst formattedProperties = mapItemsToObjects(response.items);\n```\n\nЧто мы получили?\n\n```js\nformattedProperties = {\n  \"1100\": {\n    id: 1100,\n    name: \"Алабино\",\n    kindName: \"нас. пункт\",\n    aliases: [],\n    propertyCategories: [],\n    location: {\n      countryId: 1,\n      regionId: 1003,\n      districtId: 1721,\n      routeId: 1177,\n      countryName: \"Россия\",\n      regionName: \"Московская область\",\n      districtName: \"Наро-Фоминский\",\n      routeName: \"Киевское\"\n    },\n    createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n    updatedAt: \"2016-02-15T19:07:08.916377+03:00\"\n  },\n  \"1107\": {\n    id: 1107,\n    name: \"1-ое Успенское шоссе\",\n    aliases: [],\n    propertyCategories: [\"country\"],\n    location: {\n      countryId: 1,\n      regionId: 1003,\n      districtId: 1012,\n      routeId: 1178,\n      countryName: \"Россия\",\n      regionName: \"Московская область\",\n      districtName: \"Одинцовский\",\n      routeName: \"Рублёво-Успенское\"\n    },\n    createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n    updatedAt: \"2016-08-23T12:22:43.472+03:00\"\n  },\n  \"1112\": {\n    id: 1112,\n    name: \"Александровка\",\n    kindName: \"нас. пункт\",\n    aliases: [],\n    propertyCategories: [\"country\"],\n    location: {\n      countryId: 1,\n      regionId: 1003,\n      districtId: 1009,\n      routeId: 1192,\n      countryName: \"Россия\",\n      regionName: \"Московская область\",\n      districtName: \"Красногорский\",\n      routeName: \"Ильинское\"\n    },\n    createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n    updatedAt: \"2016-02-15T19:07:08.916377+03:00\"\n  },\n  \"1137\": {\n    id: 1137,\n    name: \"2-ое Успенское шоссе\",\n    aliases: [],\n    propertyCategories: [\"country\"],\n    location: {\n      countryId: 1,\n      regionId: 1003,\n      districtId: 1012,\n      routeId: 1178,\n      countryName: \"Россия\",\n      regionName: \"Московская область\",\n      districtName: \"Одинцовский\",\n      routeName: \"Рублёво-Успенское\"\n    },\n    createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n    updatedAt: \"2016-08-23T12:22:26.629+03:00\"\n  },\n  \"1174\": {\n    id: 1174,\n    name: \"Аксиньино\",\n    kindName: \"нас. пункт\",\n    aliases: [],\n    propertyCategories: [\"country\"],\n    location: {\n      countryId: 1,\n      regionId: 1003,\n      districtId: 1012,\n      routeId: 1178,\n      countryName: \"Россия\",\n      regionName: \"Московская область\",\n      districtName: \"Одинцовский\",\n      routeName: \"Рублёво-Успенское\"\n    },\n    createdAt: \"2016-02-15T19:07:08.916377+03:00\",\n    updatedAt: \"2016-02-15T19:07:08.916377+03:00\"\n  },\n  \"1973\": {\n    id: 1973,\n    name: \"Аксаково\",\n    aliases: [],\n    propertyCategories: [\"country\"],\n    location: {\n      countryId: 1,\n      regionId: 1003,\n      districtId: 1720,\n      routeId: 1185,\n      countryName: \"Россия\",\n      regionName: \"Московская область\",\n      districtName: \"Мытищинский\",\n      routeName: \"Дмитровское\"\n    },\n    createdAt: \"2016-06-06T18:02:20.503+03:00\",\n    updatedAt: \"2016-06-06T18:02:20.503+03:00\"\n  },\n  list: [1107, 1137, 1973, 1174, 1100, 1112]\n};\n```\n\nДля чего мы это сделали? Когда нам нужно обратиться к конкретному айдишнику — мы пишем `formattedProperties[1100]`, но при этом мы можем итерироваться (проходить один за одним) по айдишникам, которые у нас лежат в `formattedProperties.list`.\n\nПоэтому когда нам нужно будет вывести список с данными, мы напишем очень простой код:\n\n```jsx\nfunction PropertiesList() {\n  return (\n    <ul>\n      {formattedProperties.list.map(function(id) {\n        const data = formattedProperties[id];\n\n        return (\n          <li>\n            <a href={`/properties/${data.id}`}>\n              {data.name} на шоссе {data.location.routeName}\n            </a>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n```\n\nБез этого нам бы пришлось городить `response.items.find(function(item) { return item.id === 1001 })`. Не очень удобно.\n\n## Готовим АПИ Редакса в домашних условиях\n\nОкей, со смыслом Редакса и даже с форматтерами мы разобрались, теперь давайте воссоздадим АПИ Редакса на `setState`.\n\nРедакс работает как [EventEmitter](https://en.wikipedia.org/wiki/Event-driven_architecture): когда происходит **событие**, вызывается **листенер**. События тут называются **экшенами**, а листенеры — **редьюсерами** (да, в них тоже приходит предыдущий стейт).\n\nВы знали, что в `setState()` можно передать не только объект, но и функцию, которая должна вернуть новый стейт? Это называется [функциональным сетСтейтом](https://medium.freecodecamp.org/374f30401b6b). У функции есть аргумент `prevState` — предыдущий стейт, он-то там и понадобится.\n\nЧто такое экшен Редакса? Это обычный объект, в котором есть поле `type`. По этому полю редьюсер понимает, что нужно сделать со стейтом. Экшен вызывается через **диспатч**.\n\nПора воссоздавать!\n\n<iframe src=\"https://codesandbox.io/embed/48rnjr52lw?module=%2Fsrc%2FCounter.js&view=editor\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n\n## Итог\n\nСегодня мы разобрались с философией Редакса: в глобальном стейте храним только то, что нельзя переиспользовать [через родителей](https://medium.com/@jmuse/d86394da2b50); заодно мы познакомились с концепцией мапперов/трансформеров/форматтеров: функций, которые переводят данные из одного вида в другой.\n\nПосле этого мы воссоздали АПИ Редакса с его редьюсерами-экшенами-диспатчем на самом обычном `setState()` и познакомились с функциональным `setState()`-ом.\n","id":"fXVmCZhOpt","stageId":"rHAh7OXEFL"}