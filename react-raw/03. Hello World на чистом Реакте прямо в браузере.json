{"stage":1,"title":"Hello World на чистом Реакте прямо в браузере","subTitle":"Разберёмся почему Реакт в своей основе это самый обычный Джаваскрипт","markdown":"Погнали дальше! Про Джсх и его отличия от ХТМЛ узнали, с Джаваскриптом разобрались, пора эти знания соединять.\n\n## Реакт в браузере\n\nРеакт — это чистый Джаваскрипт. Я об этом говорил и буду говорить: Реакт это чистый Джаваскрипт и это касается не только того, что в Джсх можно писать выражения, но и того, что сам Реакт может работать без всяких Джсх и прочих Вебпаков. Давайте разберёмся.\n\nКак обычно писали сайты? Создавали `.html`-страницу, туда тегом `<script src=\"\"></script>` подключали Джс (или писали прямо внутри тегов), так и жили.\n\nПотом сайты усложнялись, превращались в приложения, пришла Нода с NPM-ом (пакетным менеджером), появились всякие [RequireJS](http://requirejs.org/), [Браузерифай](http://browserify.org/) и прочее, и прочее, и прочее.\n\nПримерно в 2014-2015 этот пик достиг апогея и появились 6to5 (ныне [Babel](http://babeljs.io/)), [systemjs](https://github.com/systemjs/systemjs) и [Вебпак](https://webpack.js.org). Честно говоря, освоить тогда Реакт было тяжко — нужно было сначала разобраться со всем этим тулингом. Поэтому сегодня мы изучим Реакт _as is_, без всяких пекейдж манагеров и модуль бандлеров. Погнали!\n\n---\n\nОткрываем [документацию Реакта](https://reactjs.org/) и идём сразу в Installation → [CDN Links](https://reactjs.org/docs/cdn-links.html). Сама документация посвящена уже работе с Джсх, поэтому будем, так сказать, на своих двоих со всем этим разбираться.\n\nРеакт делится на две библиотеки: Реакт и РеактДОМ.\n\nЧем занимается Реакт? В чём вообще смысл Реакта? **Реакт строит дерево элементов** и оптимизировано его обновляет через VirtualDOM.\n\nЭто всё! В этом весь смысл Реакта: минимальными усилиями отрисовать дерево элементов. К сожалению, обновление самим браузером очень тяжелое, вот и приходится тянуть Реакт, чтобы этим заниматься. ВиртуалДОМ хранит в памяти текущую версию дерева и когда получает обновления, строит новое, затем сравнивает их между собой и ищет отличные куски.\n\n![](https://i.imgur.com/BISUcA7.png)\n\nНо если Реакт только строит дерево элементов, кто работает с браузером? РеактДОМ. РеактДОМ это **рендерер** — то, что рендерит дерево Реакта куда-либо. В данном случае — в ДОМ.\n\n> Бывают ещё [react-native](http://facebook.github.io/react-native/), [react-tv](https://github.com/react-tv/react-tv), [redocx](https://github.com/nitin42/redocx) (рендеринг в `.docx`!), [react-blessed](https://github.com/Yomguithereal/react-blessed) (в терминал!).\n\n---\n\nЕсли мы подключим Реакт и РеактДОМ, то у нас будут доступны два объекта: [`React`](https://reactjs.org/docs/react-api.html) и [`ReactDOM`](https://reactjs.org/docs/react-dom.html). У каждого из них есть свой АПИ (**интерфейс** для работы с библиотекой), нас интересуют функции [`React.createElement()`](https://reactjs.org/docs/react-api.html#createelement) и [`ReactDOM.render()`](https://reactjs.org/docs/react-dom.html#render), с помощью них мы и напишем простенькое приложение.\n\n### Пишем `Hello, world` на `createElement()`\n\n> Работать мы будем в онлайн-песочнице: например, в [JSFiddle](https://jsfiddle.net/). Обычно используют [CodeSandbox](https://codesandbox.io) — там есть поддержка современных библиотек и фреймворков.\n\n> `Hello, world` это самое примитивное приложение, которое выводит строку Hello, world.\n\nВ `index.html` подключим React и ReactDOM, а наш код будем писать в третьем `<script>`\n\n```html\n<!DOCTYPE html>\n<html  lang=\"en\">\n<head>\n  <meta  charset=\"UTF-8\">\n  <title>Курс по Реакту</title>\n</head>\n<body>\n\n  <script crossorigin src=\"https://unpkg.com/react@16/umd/react.development.js\"></script>\n  <script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"></script>\n  <script>\n    // здесь будет код\n  </script>\n</body>\n</html>\n```\n\n> скрипты подключаются перед закрывающим `</body>` чтобы не блокировать загрузку страницы\n\nТеперь создадим див с айди `app` — он нам понадобится как место, куда будет рендерить РеактДОМ.\n\n```html\n...\n<body>\n  <div id=\"app\"></div>\n\n  ...\n</body>\n...\n```\n\nТеперь в третьем `script` напишем наш первый компонент.\n\n```js\n...\n<script>\n  // нам к нему нужно будет обращаться, поэтому назначим в константу\n  const PlainHelloWorld = React.createElement('h1', null, 'Hello World');\n</script>\n...\n```\n\nВ функции `createElement` три параметра: **компонент**, **пропы** и **чилдрен**.\n\n#### Компонент\n\nВторым важным плюсом Реакта после ВиртуалДОМ является компонентный подход: вы можете объединять своё приложение в компоненты и использовать их. Что такое компоненты? Компоненты это функции или классы (об этом позже), которые **возвращают** реакт-дерево. Давайте попробуем написать свой первый компонент?\n\n```js\nconst HelloWorld = function() {\n  return React.createElement(\"h1\", null, \"Hello World\");\n};\n```\n\nЗдесь ничего сложного нет — вместо ссылки на наш `h1` мы сделали компонент `HelloWorld`, с которым будем работать\n\n#### Пропы\n\nПропы — это **объект** со всеми атрибутами, который приходит в компонент при его вызове. Например, атрибут `src` в `<img />` будет доступен под `props.img` в функции `function Img(props) { ... }`.\n\n#### Чилдрен\n\nНо как вкладывать компоненты друг в друга, мы же работаем с **деревом**? Для этого есть специальный проп `props.children` — именно он и передаётся третьим параметром в `createElement`.\n\n---\n\nОкей, звучит всё непонятно, память вроде бы запомнила, давайте теперь это всё **отрендерим** — в этом нам поможет `ReactDOM.render(component, element)`.\n\n```html\n<script>\n  // нам к нему нужно будет обращаться, поэтому назначим в константу\n  const PlainHelloWorld = React.createElement('h1', null, 'Hello World');\n\n  // сделаем свой компонент\n  const HelloWorld = function() {\n    return React.createElement('h1', null, 'Hello World');\n  }\n\n  // отрендерим\n  ReactDOM.render(PlainHelloWorld, document.getElementById(\"app\"));\n  // если бы мы хотели отрендерить свой компонент, то его нужно было бы сначала вызвать через createElement\n  // ReactDOM.render(React.createElement(HelloWorld, null, null), document.getElementById(\"app\"))\n</script>\n```\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/hehL6x6t/2/embedded/result,html,js/\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n---\n\nЭто всё. Сегодняшний урок не очень практический и очень теоретический, но мне важно было показать вам на примерах, что Реакт — это чистый Джаваскрипт и вся его работа сводится к двум самым обычным функциям: `React.createElement()` и `ReactDOM.render()`. В будущем вам это понимание понадобится.\n\nЗадание? Попробуйте это всё собрать у себя локально!\n","id":"jXVFCU2fVG","stageId":"9wO7ihaBIk"}