{"stage":1,"title":"Реакт для верстальщика","subTitle":"Как перестать заниматься рутиной и стать ближе к нормальному фронтэнду","markdown":"> Если вы не умеете верстать — сейчас самое время взять [курс по вёрстке](https://erodionov.ru/courses/verstka)\n\nПродолжаем изучать теорию. Практика будет через пару уроков.\n\nИтак, вы верстальщик, но всё чаще стали замечать косые взгляды в свою сторону, да и вообще, понимаете что вёрстка в .html-файлах и потом перегон в Реакт это как-то не очень оптимизировано в рабочих процессах. Что делать?\n\nВо-первых, **обязательно изучите [Терминал и Гит](https://erodionov.ru/courses/verstka/FhTKluFzm7/Z85TwJEQNd)**, если ещё не — они вам понадобятся.\n\nВо-вторых, **не бойтесь**. Больно не будет. Чтобы верстать на Реакте, даже джаваскрипт особо знать не надо.\n\nПоехали!\n\n## Джсх\n\nВы знаете, что ХТМЛ это сабсет ХМЛ? [XML](https://en.wikipedia.org/wiki/XML) это формат данных. Формат данных нужен, потому что с жестким форматом легче работать с данными: вы всегда знаете как и до чего достучаться.\n\n[JSX](https://facebook.github.io/jsx/) это тоже сабсет ХМЛ, он от него отнаследовал открывающие и закрывающие теги, ну и атрибуты в них. В [документации Реакта](https://reactjs.org/docs/introducing-jsx.html) об этом подробно рассказано со всеми примерами.\n\nСкорее всего, вы слышали (или даже использовали) про всякие шаблонизаторы типа [pug](https://pugjs.org), [haml](http://haml.info/), [Handlebars.js](https://handlebarsjs.com/) и Джсх может напомнить вам о них, но это не шаблонизатор.\n\nШаблонизаторы работают достаточно тупо: берётся строка (типа `<div>{{title}}</div>`), в ней заменяется `{{title}}` на реальные данные и получается готовый ХТМЛ. **Шаблонизаторы заменяют** — вот что нужно помнить.\n\nВ Джсх важные первые две буквы: это самый настоящий джаваскрипт. То, что вы пишете в джсх, будет отработано как настоящий джаваскрипт и это даёт безграничную мощь — вы можете писать там что угодно и вам не нужно будет подключать какие-нибудь плагины или директивы, чтобы расширить ваш шаблонизатор.\n\nОкей, с фундаменталикой закончили, давайте перейдём к отличиям Джсх от ХТМЛ.\n\n## Отличия Джсх от ХТМЛ\n\nТак как Джсх это Джс, то он немного отличается от ХТМЛ.\n\n### Закрывающий тег обязателен\n\nДа, если ХТМЛ5 ушёл от `<img />`, то Джсх к ним вернулся: иначе парсер не поймёт как с этим работать.\n\n### Некоторые атрибуты изменены\n\nТак как в Джсе [есть классы](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes), то атрибут `class=\"\"` нужно использовать как `className=\"\"`. То же самое и с [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) — это резервное слово для циклов.\n\n### Атрибуты должны быть в camelCase\n\n`data-x` или `html-for` не сработают, все атрибуты должны быть в camelCase варианте. Особенно это заметно в Свг: всякие `stroke-width` должны быть как `strokeWidth`.\n\n### Компоненты должны быть в PascalCase\n\nЗабегая чуть вперёд (мы об этом поговорим в следующем уроке), скажу что Реакт построен на компонентах: вы можете писать любые компоненты и их использовать. Нюанс в том, что ваши компоненты должны быть в PascalCase, иначе парсер будет думать что это хтмл-тег и всякие `<myComponent />` будут распознаваться как `<my-component />`, чего в хтмл и не существует.\n\n---\n\nЭто всё! Сегодня мы прошлись ещё немного по теории и изучили Джсх, его отличия от ХТМЛ и, конечно же, обычных шаблонизаторов. Следующий урок — про базовый Джаваскрипт.\n","id":"7IKmUCTGpw","stageId":"9wO7ihaBIk"}